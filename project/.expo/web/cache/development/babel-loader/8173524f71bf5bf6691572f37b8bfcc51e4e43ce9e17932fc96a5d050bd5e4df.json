{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport { getAppEventName, SharedEventEmitter } from \"../../utils/events\";\nimport { getNativeModule } from \"../../utils/native\";\nimport Transaction from \"./Transaction\";\nvar transactionId = 0;\nvar generateTransactionId = function generateTransactionId() {\n  return transactionId++;\n};\nvar TransactionHandler = function () {\n  function TransactionHandler(firestore) {\n    _classCallCheck(this, TransactionHandler);\n    this._pending = {};\n    this._firestore = firestore;\n    SharedEventEmitter.addListener(getAppEventName(this._firestore, 'firestore_transaction_event'), this._handleTransactionEvent.bind(this));\n  }\n  return _createClass(TransactionHandler, [{\n    key: \"_add\",\n    value: function _add(updateFunction) {\n      var _this = this;\n      var id = generateTransactionId();\n      var meta = {\n        id: id,\n        updateFunction: updateFunction,\n        stack: new Error().stack.split('\\n').slice(2).join('\\n')\n      };\n      this._pending[id] = {\n        meta: meta,\n        transaction: new Transaction(this._firestore, meta)\n      };\n      return new Promise(function (resolve, reject) {\n        getNativeModule(_this._firestore).transactionBegin(id);\n        meta.resolve = function (r) {\n          resolve(r);\n          _this._remove(id);\n        };\n        meta.reject = function (e) {\n          reject(e);\n          _this._remove(id);\n        };\n      });\n    }\n  }, {\n    key: \"_remove\",\n    value: function _remove(id) {\n      getNativeModule(this._firestore).transactionDispose(id);\n      delete this._pending[id];\n    }\n  }, {\n    key: \"_handleTransactionEvent\",\n    value: function _handleTransactionEvent(event) {\n      switch (event.type) {\n        case 'update':\n          this._handleUpdate(event);\n          break;\n        case 'error':\n          this._handleError(event);\n          break;\n        case 'complete':\n          this._handleComplete(event);\n          break;\n      }\n    }\n  }, {\n    key: \"_handleUpdate\",\n    value: (function () {\n      var _handleUpdate2 = _asyncToGenerator(function* (event) {\n        var id = event.id;\n        if (!this._pending[id]) return this._remove(id);\n        var _this$_pending$id = this._pending[id],\n          meta = _this$_pending$id.meta,\n          transaction = _this$_pending$id.transaction;\n        var updateFunction = meta.updateFunction,\n          reject = meta.reject;\n        transaction._prepare();\n        var finalError;\n        var updateFailed;\n        var pendingResult;\n        try {\n          var possiblePromise = updateFunction(transaction);\n          if (!possiblePromise || !possiblePromise.then) {\n            finalError = new Error('Update function for `firestore.runTransaction(updateFunction)` must return a Promise.');\n          } else {\n            pendingResult = yield possiblePromise;\n          }\n        } catch (exception) {\n          updateFailed = true;\n          finalError = exception;\n        }\n        if (updateFailed || finalError) {\n          return reject(finalError);\n        }\n        transaction._pendingResult = pendingResult;\n        return getNativeModule(this._firestore).transactionApplyBuffer(id, transaction._commandBuffer);\n      });\n      function _handleUpdate(_x) {\n        return _handleUpdate2.apply(this, arguments);\n      }\n      return _handleUpdate;\n    }())\n  }, {\n    key: \"_handleError\",\n    value: function _handleError(event) {\n      var id = event.id,\n        error = event.error;\n      var meta = this._pending[id].meta;\n      if (meta && error) {\n        var code = error.code,\n          message = error.message;\n        var errorWithStack = new Error(message);\n        errorWithStack.code = code;\n        errorWithStack.stack = `Error: ${message}\\n${meta.stack}`;\n        meta.reject(errorWithStack);\n      }\n    }\n  }, {\n    key: \"_handleComplete\",\n    value: function _handleComplete(event) {\n      var id = event.id;\n      var _this$_pending$id2 = this._pending[id],\n        meta = _this$_pending$id2.meta,\n        transaction = _this$_pending$id2.transaction;\n      if (meta) {\n        var pendingResult = transaction._pendingResult;\n        meta.resolve(pendingResult);\n      }\n    }\n  }]);\n}();\nexport { TransactionHandler as default };","map":{"version":3,"names":["getAppEventName","SharedEventEmitter","getNativeModule","Transaction","transactionId","generateTransactionId","TransactionHandler","firestore","_classCallCheck","_pending","_firestore","addListener","_handleTransactionEvent","bind","_createClass","key","value","_add","updateFunction","_this","id","meta","stack","Error","split","slice","join","transaction","Promise","resolve","reject","transactionBegin","r","_remove","e","transactionDispose","event","type","_handleUpdate","_handleError","_handleComplete","_handleUpdate2","_asyncToGenerator","_this$_pending$id","_prepare","finalError","updateFailed","pendingResult","possiblePromise","then","exception","_pendingResult","transactionApplyBuffer","_commandBuffer","_x","apply","arguments","error","code","message","errorWithStack","_this$_pending$id2","default"],"sources":["C:/Users/Johnny Hermitano/Documents/GitHub/sofdes_watermelon/project/node_modules/react-native-firebase/dist/modules/firestore/TransactionHandler.js"],"sourcesContent":["/**\n * \n * Firestore Transaction representation wrapper\n */\nimport { getAppEventName, SharedEventEmitter } from '../../utils/events';\nimport { getNativeModule } from '../../utils/native';\nimport Transaction from './Transaction';\nlet transactionId = 0;\n/**\n * Uses the push id generator to create a transaction id\n * @returns {number}\n * @private\n */\n\nconst generateTransactionId = () => transactionId++;\n\n/**\n * @class TransactionHandler\n */\nexport default class TransactionHandler {\n  constructor(firestore) {\n    this._pending = {};\n    this._firestore = firestore;\n    SharedEventEmitter.addListener(getAppEventName(this._firestore, 'firestore_transaction_event'), this._handleTransactionEvent.bind(this));\n  }\n  /**\n   * -------------\n   * INTERNAL API\n   * -------------\n   */\n\n  /**\n   * Add a new transaction and start it natively.\n   * @param updateFunction\n   */\n\n\n  _add(updateFunction) {\n    const id = generateTransactionId(); // $FlowExpectedError: Transaction has to be populated\n\n    const meta = {\n      id,\n      updateFunction,\n      stack: new Error().stack.split('\\n').slice(2).join('\\n')\n    };\n    this._pending[id] = {\n      meta,\n      transaction: new Transaction(this._firestore, meta)\n    }; // deferred promise\n\n    return new Promise((resolve, reject) => {\n      getNativeModule(this._firestore).transactionBegin(id);\n\n      meta.resolve = r => {\n        resolve(r);\n\n        this._remove(id);\n      };\n\n      meta.reject = e => {\n        reject(e);\n\n        this._remove(id);\n      };\n    });\n  }\n  /**\n   * Destroys a local instance of a transaction meta\n   *\n   * @param id\n   * @private\n   */\n\n\n  _remove(id) {\n    getNativeModule(this._firestore).transactionDispose(id);\n    delete this._pending[id];\n  }\n  /**\n   * -------------\n   *    EVENTS\n   * -------------\n   */\n\n  /**\n   * Handles incoming native transaction events and distributes to correct\n   * internal handler by event.type\n   *\n   * @param event\n   * @returns {*}\n   * @private\n   */\n\n\n  _handleTransactionEvent(event) {\n    // eslint-disable-next-line default-case\n    switch (event.type) {\n      case 'update':\n        this._handleUpdate(event);\n\n        break;\n\n      case 'error':\n        this._handleError(event);\n\n        break;\n\n      case 'complete':\n        this._handleComplete(event);\n\n        break;\n    }\n  }\n  /**\n   * Handles incoming native transaction update events\n   *\n   * @param event\n   * @private\n   */\n\n\n  async _handleUpdate(event) {\n    const {\n      id\n    } = event; // abort if no longer exists js side\n\n    if (!this._pending[id]) return this._remove(id);\n    const {\n      meta,\n      transaction\n    } = this._pending[id];\n    const {\n      updateFunction,\n      reject\n    } = meta; // clear any saved state from previous transaction runs\n\n    transaction._prepare();\n\n    let finalError;\n    let updateFailed;\n    let pendingResult; // run the users custom update functionality\n\n    try {\n      const possiblePromise = updateFunction(transaction); // validate user has returned a promise in their update function\n      // TODO must it actually return a promise? Can't find any usages of it without one...\n\n      if (!possiblePromise || !possiblePromise.then) {\n        finalError = new Error('Update function for `firestore.runTransaction(updateFunction)` must return a Promise.');\n      } else {\n        pendingResult = await possiblePromise;\n      }\n    } catch (exception) {\n      // exception can still be falsey if user `Promise.reject();` 's with no args\n      // so we track the exception with a updateFailed boolean to ensure no fall-through\n      updateFailed = true;\n      finalError = exception;\n    } // reject the final promise and remove from native\n    // update is failed when either the users updateFunction\n    // throws an error or rejects a promise\n\n\n    if (updateFailed || finalError) {\n      // $FlowExpectedError: Reject will always be present\n      return reject(finalError);\n    } // capture the resolved result as we'll need this\n    // to resolve the runTransaction() promise when\n    // native emits that the transaction is final\n\n\n    transaction._pendingResult = pendingResult; // send the buffered update/set/delete commands for native to process\n\n    return getNativeModule(this._firestore).transactionApplyBuffer(id, transaction._commandBuffer);\n  }\n  /**\n   * Handles incoming native transaction error events\n   *\n   * @param event\n   * @private\n   */\n\n\n  _handleError(event) {\n    const {\n      id,\n      error\n    } = event;\n    const {\n      meta\n    } = this._pending[id];\n\n    if (meta && error) {\n      const {\n        code,\n        message\n      } = error; // build a JS error and replace its stack\n      // with the captured one at start of transaction\n      // so it's actually relevant to the user\n\n      const errorWithStack = new Error(message); // $FlowExpectedError: code is needed for Firebase errors\n\n      errorWithStack.code = code; // $FlowExpectedError: stack should be a stack trace\n\n      errorWithStack.stack = `Error: ${message}\\n${meta.stack}`; // $FlowExpectedError: Reject will always be present\n\n      meta.reject(errorWithStack);\n    }\n  }\n  /**\n   * Handles incoming native transaction complete events\n   *\n   * @param event\n   * @private\n   */\n\n\n  _handleComplete(event) {\n    const {\n      id\n    } = event;\n    const {\n      meta,\n      transaction\n    } = this._pending[id];\n\n    if (meta) {\n      const pendingResult = transaction._pendingResult; // $FlowExpectedError: Resolve will always be present\n\n      meta.resolve(pendingResult);\n    }\n  }\n\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}