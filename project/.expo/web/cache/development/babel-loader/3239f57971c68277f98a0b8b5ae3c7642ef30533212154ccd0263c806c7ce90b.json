{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nfunction _callSuper(_this, derived, args) {\n  function isNativeReflectConstruct() {\n    if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n    if (Reflect.construct.sham) return false;\n    if (typeof Proxy === \"function\") return true;\n    try {\n      return !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    } catch (e) {\n      return false;\n    }\n  }\n  derived = _getPrototypeOf(derived);\n  return _possibleConstructorReturn(_this, isNativeReflectConstruct() ? Reflect.construct(derived, args || [], _getPrototypeOf(_this).constructor) : derived.apply(_this, args));\n}\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport Reference from \"./Reference\";\nimport TransactionHandler from \"./transaction\";\nimport ModuleBase from \"../../utils/ModuleBase\";\nimport { getNativeModule } from \"../../utils/native\";\nimport firebase from \"../core/firebase\";\nvar NATIVE_EVENTS = ['database_transaction_event'];\nexport var MODULE_NAME = 'RNFirebaseDatabase';\nexport var NAMESPACE = 'database';\nvar Database = function (_ModuleBase) {\n  function Database(appOrCustomUrl, customUrl) {\n    var _this2;\n    _classCallCheck(this, Database);\n    var app;\n    var url;\n    if (typeof appOrCustomUrl === 'string') {\n      app = firebase.app();\n      url = appOrCustomUrl;\n    } else {\n      app = appOrCustomUrl;\n      url = customUrl || app.options.databaseURL;\n    }\n    url = url.endsWith('/') ? url : `${url}/`;\n    _this2 = _callSuper(this, Database, [app, {\n      events: NATIVE_EVENTS,\n      moduleName: MODULE_NAME,\n      hasMultiAppSupport: true,\n      hasCustomUrlSupport: true,\n      namespace: NAMESPACE\n    }, url]);\n    _this2._serverTimeOffset = 0;\n    _this2._databaseURL = url;\n    _this2._transactionHandler = new TransactionHandler(_this2);\n    if (app.options.persistence) {\n      getNativeModule(_this2).setPersistence(app.options.persistence);\n    }\n    setTimeout(function () {\n      _this2._offsetRef = _this2.ref('.info/serverTimeOffset');\n      _this2._offsetRef.on('value', function (snapshot) {\n        _this2._serverTimeOffset = snapshot.val() || _this2._serverTimeOffset;\n      });\n    }, 1);\n    return _this2;\n  }\n  _inherits(Database, _ModuleBase);\n  return _createClass(Database, [{\n    key: \"getServerTime\",\n    value: function getServerTime() {\n      return new Date(Date.now() + this._serverTimeOffset);\n    }\n  }, {\n    key: \"goOnline\",\n    value: function goOnline() {\n      getNativeModule(this).goOnline();\n    }\n  }, {\n    key: \"goOffline\",\n    value: function goOffline() {\n      getNativeModule(this).goOffline();\n    }\n  }, {\n    key: \"ref\",\n    value: function ref(path) {\n      return new Reference(this, path);\n    }\n  }, {\n    key: \"databaseUrl\",\n    get: function get() {\n      return this._databaseURL;\n    }\n  }]);\n}(ModuleBase);\nexport { Database as default };\nexport var statics = {\n  ServerValue: NativeModules.RNFirebaseDatabase ? {\n    TIMESTAMP: NativeModules.RNFirebaseDatabase.serverValueTimestamp || {\n      '.sv': 'timestamp'\n    }\n  } : {},\n  enableLogging: function enableLogging(enabled) {\n    if (NativeModules[MODULE_NAME]) {\n      NativeModules[MODULE_NAME].enableLogging(enabled);\n    }\n  }\n};","map":{"version":3,"names":["Reference","TransactionHandler","ModuleBase","getNativeModule","firebase","NATIVE_EVENTS","MODULE_NAME","NAMESPACE","Database","_ModuleBase","appOrCustomUrl","customUrl","_this2","_classCallCheck","app","url","options","databaseURL","endsWith","_callSuper","events","moduleName","hasMultiAppSupport","hasCustomUrlSupport","namespace","_serverTimeOffset","_databaseURL","_transactionHandler","persistence","setPersistence","setTimeout","_offsetRef","ref","on","snapshot","val","_inherits","_createClass","key","value","getServerTime","Date","now","goOnline","goOffline","path","get","default","statics","ServerValue","NativeModules","RNFirebaseDatabase","TIMESTAMP","serverValueTimestamp","enableLogging","enabled"],"sources":["C:/Users/Johnny Hermitano/Documents/GitHub/sofdes_watermelon/project/node_modules/react-native-firebase/dist/modules/database/index.js"],"sourcesContent":["/**\n * \n * Database representation wrapper\n */\nimport { NativeModules } from 'react-native';\nimport Reference from './Reference';\nimport TransactionHandler from './transaction';\nimport ModuleBase from '../../utils/ModuleBase';\nimport { getNativeModule } from '../../utils/native';\nimport firebase from '../core/firebase';\nconst NATIVE_EVENTS = ['database_transaction_event' // 'database_server_offset', // TODO\n];\nexport const MODULE_NAME = 'RNFirebaseDatabase';\nexport const NAMESPACE = 'database';\n/**\n * @class Database\n */\n\nexport default class Database extends ModuleBase {\n  constructor(appOrCustomUrl, customUrl) {\n    let app;\n    let url;\n\n    if (typeof appOrCustomUrl === 'string') {\n      app = firebase.app();\n      url = appOrCustomUrl;\n    } else {\n      app = appOrCustomUrl;\n      url = customUrl || app.options.databaseURL;\n    } // enforce trailing slash\n\n\n    url = url.endsWith('/') ? url : `${url}/`;\n    super(app, {\n      events: NATIVE_EVENTS,\n      moduleName: MODULE_NAME,\n      hasMultiAppSupport: true,\n      hasCustomUrlSupport: true,\n      namespace: NAMESPACE\n    }, url);\n    this._serverTimeOffset = 0;\n    this._databaseURL = url;\n    this._transactionHandler = new TransactionHandler(this);\n\n    if (app.options.persistence) {\n      getNativeModule(this).setPersistence(app.options.persistence);\n    } // server time listener\n    // setTimeout used to avoid setPersistence race conditions\n    // todo move this and persistence to native side, create a db configure() method natively perhaps?\n    // todo and then native can call setPersistence and then emit offset events\n\n\n    setTimeout(() => {\n      this._offsetRef = this.ref('.info/serverTimeOffset');\n\n      this._offsetRef.on('value', snapshot => {\n        this._serverTimeOffset = snapshot.val() || this._serverTimeOffset;\n      });\n    }, 1);\n  }\n  /**\n   *\n   * @return {Date}\n   */\n\n\n  getServerTime() {\n    return new Date(Date.now() + this._serverTimeOffset);\n  }\n  /**\n   *\n   */\n\n\n  goOnline() {\n    getNativeModule(this).goOnline();\n  }\n  /**\n   *\n   */\n\n\n  goOffline() {\n    getNativeModule(this).goOffline();\n  }\n  /**\n   * Returns a new firebase reference instance\n   * @param path\n   * @returns {Reference}\n   */\n\n\n  ref(path) {\n    return new Reference(this, path);\n  }\n  /**\n   * Returns the database url\n   * @returns {string}\n   */\n\n\n  get databaseUrl() {\n    return this._databaseURL;\n  }\n\n}\nexport const statics = {\n  ServerValue: NativeModules.RNFirebaseDatabase ? {\n    TIMESTAMP: NativeModules.RNFirebaseDatabase.serverValueTimestamp || {\n      '.sv': 'timestamp'\n    }\n  } : {},\n\n  enableLogging(enabled) {\n    if (NativeModules[MODULE_NAME]) {\n      NativeModules[MODULE_NAME].enableLogging(enabled);\n    }\n  }\n\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}