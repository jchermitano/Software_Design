{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nvar Timestamp = function () {\n  function Timestamp(seconds, nanoseconds) {\n    _classCallCheck(this, Timestamp);\n    if (nanoseconds < 0) {\n      throw new Error(`Timestamp nanoseconds out of range: ${nanoseconds}`);\n    }\n    if (nanoseconds >= 1e9) {\n      throw new Error(`Timestamp nanoseconds out of range: ${nanoseconds}`);\n    }\n    if (seconds < -62135596800) {\n      throw new Error(`Timestamp seconds out of range: ${seconds}`);\n    }\n    if (seconds >= 253402300800) {\n      throw new Error(`Timestamp seconds out of range: ${seconds}`);\n    }\n    this.seconds = seconds;\n    this.nanoseconds = nanoseconds;\n  }\n  return _createClass(Timestamp, [{\n    key: \"toDate\",\n    value: function toDate() {\n      return new Date(this.toMillis());\n    }\n  }, {\n    key: \"toMillis\",\n    value: function toMillis() {\n      return this.seconds * 1000 + this.nanoseconds / 1e6;\n    }\n  }, {\n    key: \"isEqual\",\n    value: function isEqual(other) {\n      return other.seconds === this.seconds && other.nanoseconds === this.nanoseconds;\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return `Timestamp(seconds=${this.seconds}, nanoseconds=${this.nanoseconds})`;\n    }\n  }], [{\n    key: \"now\",\n    value: function now() {\n      return Timestamp.fromMillis(Date.now());\n    }\n  }, {\n    key: \"fromDate\",\n    value: function fromDate(date) {\n      return Timestamp.fromMillis(date.getTime());\n    }\n  }, {\n    key: \"fromMillis\",\n    value: function fromMillis(milliseconds) {\n      var seconds = Math.floor(milliseconds / 1000);\n      var nanoseconds = (milliseconds - seconds * 1000) * 1e6;\n      return new Timestamp(seconds, nanoseconds);\n    }\n  }]);\n}();\nexport { Timestamp as default };","map":{"version":3,"names":["Timestamp","seconds","nanoseconds","_classCallCheck","Error","_createClass","key","value","toDate","Date","toMillis","isEqual","other","toString","now","fromMillis","fromDate","date","getTime","milliseconds","Math","floor","default"],"sources":["C:/Users/Johnny Hermitano/Documents/GitHub/sofdes_watermelon/project/node_modules/react-native-firebase/dist/modules/firestore/Timestamp.js"],"sourcesContent":["/**\n * \n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * ----\n *\n * Some snippets taken from: https://github.com/firebase/firebase-js-sdk/blob/master/packages/firestore/src/api/timestamp.ts\n * and adapted to work for React Native Firebase\n */\n\n/**\n * Timestamp representation wrapper\n */\nexport default class Timestamp {\n  static now() {\n    return Timestamp.fromMillis(Date.now());\n  }\n\n  static fromDate(date) {\n    return Timestamp.fromMillis(date.getTime());\n  }\n\n  static fromMillis(milliseconds) {\n    const seconds = Math.floor(milliseconds / 1000);\n    const nanoseconds = (milliseconds - seconds * 1000) * 1e6;\n    return new Timestamp(seconds, nanoseconds);\n  }\n\n  constructor(seconds, nanoseconds) {\n    if (nanoseconds < 0) {\n      throw new Error(`Timestamp nanoseconds out of range: ${nanoseconds}`);\n    }\n\n    if (nanoseconds >= 1e9) {\n      throw new Error(`Timestamp nanoseconds out of range: ${nanoseconds}`);\n    } // Midnight at the beginning of 1/1/1 is the earliest Firestore supports.\n\n\n    if (seconds < -62135596800) {\n      throw new Error(`Timestamp seconds out of range: ${seconds}`);\n    } // This will break in the year 10,000.\n\n\n    if (seconds >= 253402300800) {\n      throw new Error(`Timestamp seconds out of range: ${seconds}`);\n    }\n\n    this.seconds = seconds;\n    this.nanoseconds = nanoseconds;\n  }\n\n  toDate() {\n    return new Date(this.toMillis());\n  }\n\n  toMillis() {\n    return this.seconds * 1000 + this.nanoseconds / 1e6;\n  }\n\n  isEqual(other) {\n    return other.seconds === this.seconds && other.nanoseconds === this.nanoseconds;\n  }\n\n  toString() {\n    return `Timestamp(seconds=${this.seconds}, nanoseconds=${this.nanoseconds})`;\n  }\n\n}"],"mappings":";;IAyBqBA,SAAS;EAe5B,SAAAA,UAAYC,OAAO,EAAEC,WAAW,EAAE;IAAAC,eAAA,OAAAH,SAAA;IAChC,IAAIE,WAAW,GAAG,CAAC,EAAE;MACnB,MAAM,IAAIE,KAAK,CAAE,uCAAsCF,WAAY,EAAC,CAAC;IACvE;IAEA,IAAIA,WAAW,IAAI,GAAG,EAAE;MACtB,MAAM,IAAIE,KAAK,CAAE,uCAAsCF,WAAY,EAAC,CAAC;IACvE;IAGA,IAAID,OAAO,GAAG,CAAC,WAAW,EAAE;MAC1B,MAAM,IAAIG,KAAK,CAAE,mCAAkCH,OAAQ,EAAC,CAAC;IAC/D;IAGA,IAAIA,OAAO,IAAI,YAAY,EAAE;MAC3B,MAAM,IAAIG,KAAK,CAAE,mCAAkCH,OAAQ,EAAC,CAAC;IAC/D;IAEA,IAAI,CAACA,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACC,WAAW,GAAGA,WAAW;EAChC;EAAC,OAAAG,YAAA,CAAAL,SAAA;IAAAM,GAAA;IAAAC,KAAA,EAED,SAAAC,OAAA,EAAS;MACP,OAAO,IAAIC,IAAI,CAAC,IAAI,CAACC,QAAQ,CAAC,CAAC,CAAC;IAClC;EAAC;IAAAJ,GAAA;IAAAC,KAAA,EAED,SAAAG,SAAA,EAAW;MACT,OAAO,IAAI,CAACT,OAAO,GAAG,IAAI,GAAG,IAAI,CAACC,WAAW,GAAG,GAAG;IACrD;EAAC;IAAAI,GAAA;IAAAC,KAAA,EAED,SAAAI,QAAQC,KAAK,EAAE;MACb,OAAOA,KAAK,CAACX,OAAO,KAAK,IAAI,CAACA,OAAO,IAAIW,KAAK,CAACV,WAAW,KAAK,IAAI,CAACA,WAAW;IACjF;EAAC;IAAAI,GAAA;IAAAC,KAAA,EAED,SAAAM,SAAA,EAAW;MACT,OAAQ,qBAAoB,IAAI,CAACZ,OAAQ,iBAAgB,IAAI,CAACC,WAAY,GAAE;IAC9E;EAAC;IAAAI,GAAA;IAAAC,KAAA,EAnDD,SAAAO,IAAA,EAAa;MACX,OAAOd,SAAS,CAACe,UAAU,CAACN,IAAI,CAACK,GAAG,CAAC,CAAC,CAAC;IACzC;EAAC;IAAAR,GAAA;IAAAC,KAAA,EAED,SAAAS,SAAgBC,IAAI,EAAE;MACpB,OAAOjB,SAAS,CAACe,UAAU,CAACE,IAAI,CAACC,OAAO,CAAC,CAAC,CAAC;IAC7C;EAAC;IAAAZ,GAAA;IAAAC,KAAA,EAED,SAAAQ,WAAkBI,YAAY,EAAE;MAC9B,IAAMlB,OAAO,GAAGmB,IAAI,CAACC,KAAK,CAACF,YAAY,GAAG,IAAI,CAAC;MAC/C,IAAMjB,WAAW,GAAG,CAACiB,YAAY,GAAGlB,OAAO,GAAG,IAAI,IAAI,GAAG;MACzD,OAAO,IAAID,SAAS,CAACC,OAAO,EAAEC,WAAW,CAAC;IAC5C;EAAC;AAAA;AAAA,SAbkBF,SAAS,IAAAsB,OAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}