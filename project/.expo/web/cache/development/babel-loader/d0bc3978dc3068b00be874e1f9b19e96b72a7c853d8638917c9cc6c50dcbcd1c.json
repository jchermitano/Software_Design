{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nfunction _callSuper(_this, derived, args) {\n  function isNativeReflectConstruct() {\n    if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n    if (Reflect.construct.sham) return false;\n    if (typeof Proxy === \"function\") return true;\n    try {\n      return !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    } catch (e) {\n      return false;\n    }\n  }\n  derived = _getPrototypeOf(derived);\n  return _possibleConstructorReturn(_this, isNativeReflectConstruct() ? Reflect.construct(derived, args || [], _getPrototypeOf(_this).constructor) : derived.apply(_this, args));\n}\nimport ModuleBase from \"../../utils/ModuleBase\";\nimport { getNativeModule } from \"../../utils/native\";\nimport { isString, isObject } from \"../../utils\";\nvar AlphaNumericUnderscore = /^[a-zA-Z0-9_]+$/;\nvar ReservedEventNames = ['app_clear_data', 'app_uninstall', 'app_update', 'error', 'first_open', 'in_app_purchase', 'notification_dismiss', 'notification_foreground', 'notification_open', 'notification_receive', 'os_update', 'session_start', 'user_engagement'];\nexport var MODULE_NAME = 'RNFirebaseAnalytics';\nexport var NAMESPACE = 'analytics';\nvar Analytics = function (_ModuleBase) {\n  function Analytics(app) {\n    _classCallCheck(this, Analytics);\n    return _callSuper(this, Analytics, [app, {\n      moduleName: MODULE_NAME,\n      hasMultiAppSupport: false,\n      hasCustomUrlSupport: false,\n      namespace: NAMESPACE\n    }]);\n  }\n  _inherits(Analytics, _ModuleBase);\n  return _createClass(Analytics, [{\n    key: \"logEvent\",\n    value: function logEvent(name) {\n      var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      if (!isString(name)) {\n        throw new Error(`analytics.logEvent(): First argument 'name' is required and must be a string value.`);\n      }\n      if (typeof params !== 'undefined' && !isObject(params)) {\n        throw new Error(`analytics.logEvent(): Second optional argument 'params' must be an object if provided.`);\n      }\n      if (ReservedEventNames.includes(name)) {\n        throw new Error(`analytics.logEvent(): event name '${name}' is a reserved event name and can not be used.`);\n      }\n      if (!AlphaNumericUnderscore.test(name)) {\n        throw new Error(`analytics.logEvent(): Event name '${name}' is invalid. Names should contain 1 to 32 alphanumeric characters or underscores.`);\n      }\n      if (params && Object.keys(params).length > 25) throw new Error('analytics.logEvent(): Maximum number of parameters exceeded (25).');\n      getNativeModule(this).logEvent(name, params);\n    }\n  }, {\n    key: \"setAnalyticsCollectionEnabled\",\n    value: function setAnalyticsCollectionEnabled(enabled) {\n      getNativeModule(this).setAnalyticsCollectionEnabled(enabled);\n    }\n  }, {\n    key: \"setCurrentScreen\",\n    value: function setCurrentScreen(screenName, screenClassOverride) {\n      getNativeModule(this).setCurrentScreen(screenName, screenClassOverride);\n    }\n  }, {\n    key: \"setMinimumSessionDuration\",\n    value: function setMinimumSessionDuration() {\n      var milliseconds = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 10000;\n      getNativeModule(this).setMinimumSessionDuration(milliseconds);\n    }\n  }, {\n    key: \"setSessionTimeoutDuration\",\n    value: function setSessionTimeoutDuration() {\n      var milliseconds = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1800000;\n      getNativeModule(this).setSessionTimeoutDuration(milliseconds);\n    }\n  }, {\n    key: \"setUserId\",\n    value: function setUserId(id) {\n      if (id !== null && !isString(id)) {\n        throw new Error('analytics.setUserId(): The supplied userId must be a string value or null.');\n      }\n      getNativeModule(this).setUserId(id);\n    }\n  }, {\n    key: \"setUserProperty\",\n    value: function setUserProperty(name, value) {\n      if (value !== null && !isString(value)) {\n        throw new Error('analytics.setUserProperty(): The supplied property must be a string value or null.');\n      }\n      getNativeModule(this).setUserProperty(name, value);\n    }\n  }, {\n    key: \"setUserProperties\",\n    value: function setUserProperties(object) {\n      var _this2 = this;\n      Object.keys(object).forEach(function (property) {\n        var value = object[property];\n        if (value !== null && !isString(value)) {\n          throw new Error(`analytics.setUserProperties(): The property with name '${property}' must be a string value or null.`);\n        }\n        getNativeModule(_this2).setUserProperty(property, object[property]);\n      });\n    }\n  }]);\n}(ModuleBase);\nexport { Analytics as default };\nexport var statics = {};","map":{"version":3,"names":["ModuleBase","getNativeModule","isString","isObject","AlphaNumericUnderscore","ReservedEventNames","MODULE_NAME","NAMESPACE","Analytics","_ModuleBase","app","_classCallCheck","_callSuper","moduleName","hasMultiAppSupport","hasCustomUrlSupport","namespace","_inherits","_createClass","key","value","logEvent","name","params","arguments","length","undefined","Error","includes","test","Object","keys","setAnalyticsCollectionEnabled","enabled","setCurrentScreen","screenName","screenClassOverride","setMinimumSessionDuration","milliseconds","setSessionTimeoutDuration","setUserId","id","setUserProperty","setUserProperties","object","_this2","forEach","property","default","statics"],"sources":["C:/Users/Johnny Hermitano/Documents/GitHub/sofdes_watermelon/project/node_modules/react-native-firebase/dist/modules/analytics/index.js"],"sourcesContent":["/**\n * \n * Analytics representation wrapper\n */\nimport ModuleBase from '../../utils/ModuleBase';\nimport { getNativeModule } from '../../utils/native';\nimport { isString, isObject } from '../../utils';\nconst AlphaNumericUnderscore = /^[a-zA-Z0-9_]+$/;\nconst ReservedEventNames = ['app_clear_data', 'app_uninstall', 'app_update', 'error', 'first_open', 'in_app_purchase', 'notification_dismiss', 'notification_foreground', 'notification_open', 'notification_receive', 'os_update', 'session_start', 'user_engagement'];\nexport const MODULE_NAME = 'RNFirebaseAnalytics';\nexport const NAMESPACE = 'analytics';\nexport default class Analytics extends ModuleBase {\n  constructor(app) {\n    super(app, {\n      moduleName: MODULE_NAME,\n      hasMultiAppSupport: false,\n      hasCustomUrlSupport: false,\n      namespace: NAMESPACE\n    });\n  }\n  /**\n   * Logs an app event.\n   * @param  {string} name\n   * @param params\n   * @return {Promise}\n   */\n\n\n  logEvent(name, params = {}) {\n    if (!isString(name)) {\n      throw new Error(`analytics.logEvent(): First argument 'name' is required and must be a string value.`);\n    }\n\n    if (typeof params !== 'undefined' && !isObject(params)) {\n      throw new Error(`analytics.logEvent(): Second optional argument 'params' must be an object if provided.`);\n    } // check name is not a reserved event name\n\n\n    if (ReservedEventNames.includes(name)) {\n      throw new Error(`analytics.logEvent(): event name '${name}' is a reserved event name and can not be used.`);\n    } // name format validation\n\n\n    if (!AlphaNumericUnderscore.test(name)) {\n      throw new Error(`analytics.logEvent(): Event name '${name}' is invalid. Names should contain 1 to 32 alphanumeric characters or underscores.`);\n    } // maximum number of allowed params check\n\n\n    if (params && Object.keys(params).length > 25) throw new Error('analytics.logEvent(): Maximum number of parameters exceeded (25).'); // Parameter names can be up to 24 characters long and must start with an alphabetic character\n    // and contain only alphanumeric characters and underscores. Only String, long and double param\n    // types are supported. String parameter values can be up to 36 characters long. The \"firebase_\"\n    // prefix is reserved and should not be used for parameter names.\n\n    getNativeModule(this).logEvent(name, params);\n  }\n  /**\n   * Sets whether analytics collection is enabled for this app on this device.\n   * @param enabled\n   */\n\n\n  setAnalyticsCollectionEnabled(enabled) {\n    getNativeModule(this).setAnalyticsCollectionEnabled(enabled);\n  }\n  /**\n   * Sets the current screen name, which specifies the current visual context in your app.\n   * @param screenName\n   * @param screenClassOverride\n   */\n\n\n  setCurrentScreen(screenName, screenClassOverride) {\n    getNativeModule(this).setCurrentScreen(screenName, screenClassOverride);\n  }\n  /**\n   * Sets the minimum engagement time required before starting a session. The default value is 10000 (10 seconds).\n   * @param milliseconds\n   */\n\n\n  setMinimumSessionDuration(milliseconds = 10000) {\n    getNativeModule(this).setMinimumSessionDuration(milliseconds);\n  }\n  /**\n   * Sets the duration of inactivity that terminates the current session. The default value is 1800000 (30 minutes).\n   * @param milliseconds\n   */\n\n\n  setSessionTimeoutDuration(milliseconds = 1800000) {\n    getNativeModule(this).setSessionTimeoutDuration(milliseconds);\n  }\n  /**\n   * Sets the user ID property.\n   * @param id\n   */\n\n\n  setUserId(id) {\n    if (id !== null && !isString(id)) {\n      throw new Error('analytics.setUserId(): The supplied userId must be a string value or null.');\n    }\n\n    getNativeModule(this).setUserId(id);\n  }\n  /**\n   * Sets a user property to a given value.\n   * @param name\n   * @param value\n   */\n\n\n  setUserProperty(name, value) {\n    if (value !== null && !isString(value)) {\n      throw new Error('analytics.setUserProperty(): The supplied property must be a string value or null.');\n    }\n\n    getNativeModule(this).setUserProperty(name, value);\n  }\n  /**\n   * Sets multiple user properties to the supplied values.\n   * @RNFirebaseSpecific\n   * @param object\n   */\n\n\n  setUserProperties(object) {\n    Object.keys(object).forEach(property => {\n      const value = object[property];\n\n      if (value !== null && !isString(value)) {\n        throw new Error(`analytics.setUserProperties(): The property with name '${property}' must be a string value or null.`);\n      }\n\n      getNativeModule(this).setUserProperty(property, object[property]);\n    });\n  }\n\n}\nexport const statics = {};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}