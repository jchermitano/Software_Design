{"ast":null,"code":"import React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nvar Table = function Table(_ref) {\n  var data = _ref.data;\n  var headers = ['Ripeness', 'Count', 'Variety', 'Ripeness Date'];\n  return _jsx(ScrollView, {\n    horizontal: true,\n    style: styles.tableContainer,\n    children: _jsxs(View, {\n      style: styles.table,\n      children: [_jsx(View, {\n        style: styles.tableRow,\n        children: headers.map(function (header, index) {\n          return _jsx(Text, {\n            style: styles.tableHeader,\n            children: header\n          }, index);\n        })\n      }), data.map(function (row, index) {\n        return _jsx(View, {\n          style: styles.tableRow,\n          children: Object.values(row).map(function (value, index) {\n            return _jsx(Text, {\n              style: styles.tableCell,\n              children: value\n            }, index);\n          })\n        }, index);\n      })]\n    })\n  });\n};\nvar watermelonData = [{\n  ripeness: 'Unripe',\n  count: 10,\n  variety: 'Sugar Baby',\n  date: '04/10/24'\n}, {\n  ripeness: 'Unripe',\n  count: 9,\n  variety: 'Sugar Baby',\n  date: '04/10/24'\n}];\nvar WatermelonRipenessResult = function WatermelonRipenessResult() {\n  return _jsx(Table, {\n    data: watermelonData\n  });\n};\nvar styles = StyleSheet.create({\n  tableContainer: {\n    flex: 1\n  },\n  table: {\n    flexDirection: 'row',\n    flexWrap: 'wrap'\n  },\n  tableRow: {\n    flexDirection: 'row',\n    marginBottom: 2\n  },\n  tableHeader: {\n    width: '25%',\n    padding: 5,\n    backgroundColor: '#f2f2f2'\n  },\n  tableCell: {\n    width: '25%',\n    padding: 5,\n    borderColor: '#ccc',\n    borderWidth: 1\n  }\n});\nexport default WatermelonRipenessResult;","map":{"version":3,"names":["React","View","Text","StyleSheet","ScrollView","jsx","_jsx","jsxs","_jsxs","Table","_ref","data","headers","horizontal","style","styles","tableContainer","children","table","tableRow","map","header","index","tableHeader","row","Object","values","value","tableCell","watermelonData","ripeness","count","variety","date","WatermelonRipenessResult","create","flex","flexDirection","flexWrap","marginBottom","width","padding","backgroundColor","borderColor","borderWidth"],"sources":["C:/Users/Johnny Hermitano/Documents/GitHub/sofdes_watermelon/project/App.js"],"sourcesContent":["import React from 'react';\nimport { View, Text, StyleSheet, ScrollView } from 'react-native';\n\nconst Table = ({ data }) => {\n  const headers = ['Ripeness', 'Count', 'Variety', 'Ripeness Date'];\n\n  return (\n    <ScrollView horizontal={true} style={styles.tableContainer}>\n      <View style={styles.table}>\n        <View style={styles.tableRow}>\n          {headers.map((header, index) => (\n            <Text key={index} style={styles.tableHeader}>\n              {header}\n            </Text>\n          ))}\n        </View>\n        {data.map((row, index) => (\n          <View key={index} style={styles.tableRow}>\n            {Object.values(row).map((value, index) => (\n              <Text key={index} style={styles.tableCell}>\n                {value}\n              </Text>\n            ))}\n          </View>\n        ))}\n      </View>\n    </ScrollView>\n  );\n};\n\nconst watermelonData = [\n  { ripeness: 'Unripe', count: 10, variety: 'Sugar Baby', date: '04/10/24' },\n  { ripeness: 'Unripe', count: 9, variety: 'Sugar Baby', date: '04/10/24' },\n  // ... rest of your data\n];\n\nconst WatermelonRipenessResult = () => {\n  return <Table data={watermelonData} />;\n};\n\nconst styles = StyleSheet.create({\n  tableContainer: {\n    flex: 1,\n  },\n  table: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n  },\n  tableRow: {\n    flexDirection: 'row',\n    marginBottom: 2,\n  },\n  tableHeader: {\n    width: '25%',\n    padding: 5,\n    backgroundColor: '#f2f2f2',\n  },\n  tableCell: {\n    width: '25%',\n    padding: 5,\n    borderColor: '#ccc',\n    borderWidth: 1,\n  },\n});\n\nexport default WatermelonRipenessResult;"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAAC,OAAAC,IAAA;AAAA,OAAAC,IAAA;AAAA,OAAAC,UAAA;AAAA,OAAAC,UAAA;AAAA,SAAAC,GAAA,IAAAC,IAAA,EAAAC,IAAA,IAAAC,KAAA;AAG1B,IAAMC,KAAK,GAAG,SAARA,KAAKA,CAAAC,IAAA,EAAiB;EAAA,IAAXC,IAAI,GAAAD,IAAA,CAAJC,IAAI;EACnB,IAAMC,OAAO,GAAG,CAAC,UAAU,EAAE,OAAO,EAAE,SAAS,EAAE,eAAe,CAAC;EAEjE,OACEN,IAAA,CAACF,UAAU;IAACS,UAAU,EAAE,IAAK;IAACC,KAAK,EAAEC,MAAM,CAACC,cAAe;IAAAC,QAAA,EACzDT,KAAA,CAACP,IAAI;MAACa,KAAK,EAAEC,MAAM,CAACG,KAAM;MAAAD,QAAA,GACxBX,IAAA,CAACL,IAAI;QAACa,KAAK,EAAEC,MAAM,CAACI,QAAS;QAAAF,QAAA,EAC1BL,OAAO,CAACQ,GAAG,CAAC,UAACC,MAAM,EAAEC,KAAK;UAAA,OACzBhB,IAAA,CAACJ,IAAI;YAAaY,KAAK,EAAEC,MAAM,CAACQ,WAAY;YAAAN,QAAA,EACzCI;UAAM,GADEC,KAEL,CAAC;QAAA,CACR;MAAC,CACE,CAAC,EACNX,IAAI,CAACS,GAAG,CAAC,UAACI,GAAG,EAAEF,KAAK;QAAA,OACnBhB,IAAA,CAACL,IAAI;UAAaa,KAAK,EAAEC,MAAM,CAACI,QAAS;UAAAF,QAAA,EACtCQ,MAAM,CAACC,MAAM,CAACF,GAAG,CAAC,CAACJ,GAAG,CAAC,UAACO,KAAK,EAAEL,KAAK;YAAA,OACnChB,IAAA,CAACJ,IAAI;cAAaY,KAAK,EAAEC,MAAM,CAACa,SAAU;cAAAX,QAAA,EACvCU;YAAK,GADGL,KAEL,CAAC;UAAA,CACR;QAAC,GALOA,KAML,CAAC;MAAA,CACR,CAAC;IAAA,CACE;EAAC,CACG,CAAC;AAEjB,CAAC;AAED,IAAMO,cAAc,GAAG,CACrB;EAAEC,QAAQ,EAAE,QAAQ;EAAEC,KAAK,EAAE,EAAE;EAAEC,OAAO,EAAE,YAAY;EAAEC,IAAI,EAAE;AAAW,CAAC,EAC1E;EAAEH,QAAQ,EAAE,QAAQ;EAAEC,KAAK,EAAE,CAAC;EAAEC,OAAO,EAAE,YAAY;EAAEC,IAAI,EAAE;AAAW,CAAC,CAE1E;AAED,IAAMC,wBAAwB,GAAG,SAA3BA,wBAAwBA,CAAA,EAAS;EACrC,OAAO5B,IAAA,CAACG,KAAK;IAACE,IAAI,EAAEkB;EAAe,CAAE,CAAC;AACxC,CAAC;AAED,IAAMd,MAAM,GAAGZ,UAAU,CAACgC,MAAM,CAAC;EAC/BnB,cAAc,EAAE;IACdoB,IAAI,EAAE;EACR,CAAC;EACDlB,KAAK,EAAE;IACLmB,aAAa,EAAE,KAAK;IACpBC,QAAQ,EAAE;EACZ,CAAC;EACDnB,QAAQ,EAAE;IACRkB,aAAa,EAAE,KAAK;IACpBE,YAAY,EAAE;EAChB,CAAC;EACDhB,WAAW,EAAE;IACXiB,KAAK,EAAE,KAAK;IACZC,OAAO,EAAE,CAAC;IACVC,eAAe,EAAE;EACnB,CAAC;EACDd,SAAS,EAAE;IACTY,KAAK,EAAE,KAAK;IACZC,OAAO,EAAE,CAAC;IACVE,WAAW,EAAE,MAAM;IACnBC,WAAW,EAAE;EACf;AACF,CAAC,CAAC;AAEF,eAAeV,wBAAwB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}