{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport AndroidChannel from \"./AndroidChannel\";\nimport AndroidChannelGroup from \"./AndroidChannelGroup\";\nimport { getNativeModule } from \"../../utils/native\";\nvar AndroidNotifications = function () {\n  function AndroidNotifications(notifications) {\n    _classCallCheck(this, AndroidNotifications);\n    this._notifications = notifications;\n  }\n  return _createClass(AndroidNotifications, [{\n    key: \"createChannel\",\n    value: function createChannel(channel) {\n      if (Platform.OS === 'android') {\n        if (!(channel instanceof AndroidChannel)) {\n          throw new Error(`AndroidNotifications:createChannel expects an 'AndroidChannel' but got type ${typeof channel}`);\n        }\n        return getNativeModule(this._notifications).createChannel(channel.build());\n      }\n      return Promise.resolve();\n    }\n  }, {\n    key: \"createChannelGroup\",\n    value: function createChannelGroup(channelGroup) {\n      if (Platform.OS === 'android') {\n        if (!(channelGroup instanceof AndroidChannelGroup)) {\n          throw new Error(`AndroidNotifications:createChannelGroup expects an 'AndroidChannelGroup' but got type ${typeof channelGroup}`);\n        }\n        return getNativeModule(this._notifications).createChannelGroup(channelGroup.build());\n      }\n      return Promise.resolve();\n    }\n  }, {\n    key: \"createChannelGroups\",\n    value: function createChannelGroups(channelGroups) {\n      if (Platform.OS === 'android') {\n        if (!Array.isArray(channelGroups)) {\n          throw new Error(`AndroidNotifications:createChannelGroups expects an 'Array' but got type ${typeof channelGroups}`);\n        }\n        var nativeChannelGroups = [];\n        for (var i = 0; i < channelGroups.length; i++) {\n          var channelGroup = channelGroups[i];\n          if (!(channelGroup instanceof AndroidChannelGroup)) {\n            throw new Error(`AndroidNotifications:createChannelGroups expects array items of type 'AndroidChannelGroup' but got type ${typeof channelGroup}`);\n          }\n          nativeChannelGroups.push(channelGroup.build());\n        }\n        return getNativeModule(this._notifications).createChannelGroups(nativeChannelGroups);\n      }\n      return Promise.resolve();\n    }\n  }, {\n    key: \"createChannels\",\n    value: function createChannels(channels) {\n      if (Platform.OS === 'android') {\n        if (!Array.isArray(channels)) {\n          throw new Error(`AndroidNotifications:createChannels expects an 'Array' but got type ${typeof channels}`);\n        }\n        var nativeChannels = [];\n        for (var i = 0; i < channels.length; i++) {\n          var channel = channels[i];\n          if (!(channel instanceof AndroidChannel)) {\n            throw new Error(`AndroidNotifications:createChannels expects array items of type 'AndroidChannel' but got type ${typeof channel}`);\n          }\n          nativeChannels.push(channel.build());\n        }\n        return getNativeModule(this._notifications).createChannels(nativeChannels);\n      }\n      return Promise.resolve();\n    }\n  }, {\n    key: \"removeDeliveredNotificationsByTag\",\n    value: function removeDeliveredNotificationsByTag(tag) {\n      if (Platform.OS === 'android') {\n        if (typeof tag !== 'string') {\n          throw new Error(`AndroidNotifications:removeDeliveredNotificationsByTag expects an 'string' but got type ${typeof tag}`);\n        }\n        return getNativeModule(this._notifications).removeDeliveredNotificationsByTag(tag);\n      }\n      return Promise.resolve();\n    }\n  }, {\n    key: \"deleteChannelGroup\",\n    value: function deleteChannelGroup(groupId) {\n      if (Platform.OS === 'android') {\n        if (typeof groupId !== 'string') {\n          throw new Error(`AndroidNotifications:deleteChannelGroup expects an 'string' but got type ${typeof groupId}`);\n        }\n        return getNativeModule(this._notifications).deleteChannelGroup(groupId);\n      }\n      return Promise.resolve();\n    }\n  }, {\n    key: \"deleteChannel\",\n    value: function deleteChannel(channelId) {\n      if (Platform.OS === 'android') {\n        if (typeof channelId !== 'string') {\n          throw new Error(`AndroidNotifications:deleteChannel expects an 'string' but got type ${typeof channelId}`);\n        }\n        return getNativeModule(this._notifications).deleteChannel(channelId);\n      }\n      return Promise.resolve();\n    }\n  }, {\n    key: \"getChannel\",\n    value: function getChannel(channelId) {\n      if (Platform.OS === 'android') {\n        if (typeof channelId !== 'string') {\n          throw new Error(`AndroidNotifications:getChannel expects an 'string' but got type ${typeof channelId}`);\n        }\n        return Promise.resolve(getNativeModule(this._notifications).getChannel(channelId));\n      }\n      return Promise.resolve(null);\n    }\n  }, {\n    key: \"getChannels\",\n    value: function getChannels() {\n      if (Platform.OS === 'android') {\n        return Promise.resolve(getNativeModule(this._notifications).getChannels());\n      }\n      return Promise.resolve([]);\n    }\n  }, {\n    key: \"getChannelGroup\",\n    value: function getChannelGroup(channelGroupId) {\n      if (Platform.OS === 'android') {\n        if (typeof channelGroupId !== 'string') {\n          throw new Error(`AndroidNotifications:getChannel expects an 'string' but got type ${typeof channelGroupId}`);\n        }\n        return Promise.resolve(getNativeModule(this._notifications).getChannelGroup(channelGroupId));\n      }\n      return Promise.resolve(null);\n    }\n  }, {\n    key: \"getChannelGroups\",\n    value: function getChannelGroups() {\n      if (Platform.OS === 'android') {\n        return Promise.resolve(getNativeModule(this._notifications).getChannelGroups());\n      }\n      return Promise.resolve([]);\n    }\n  }]);\n}();\nexport { AndroidNotifications as default };","map":{"version":3,"names":["AndroidChannel","AndroidChannelGroup","getNativeModule","AndroidNotifications","notifications","_classCallCheck","_notifications","_createClass","key","value","createChannel","channel","Platform","OS","Error","build","Promise","resolve","createChannelGroup","channelGroup","createChannelGroups","channelGroups","Array","isArray","nativeChannelGroups","i","length","push","createChannels","channels","nativeChannels","removeDeliveredNotificationsByTag","tag","deleteChannelGroup","groupId","deleteChannel","channelId","getChannel","getChannels","getChannelGroup","channelGroupId","getChannelGroups","default"],"sources":["C:/Users/Johnny Hermitano/Documents/GitHub/sofdes_watermelon/project/node_modules/react-native-firebase/dist/modules/notifications/AndroidNotifications.js"],"sourcesContent":["/**\n * \n * AndroidNotifications representation wrapper\n */\nimport { Platform } from 'react-native';\nimport AndroidChannel from './AndroidChannel';\nimport AndroidChannelGroup from './AndroidChannelGroup';\nimport { getNativeModule } from '../../utils/native';\nexport default class AndroidNotifications {\n  constructor(notifications) {\n    this._notifications = notifications;\n  }\n\n  createChannel(channel) {\n    if (Platform.OS === 'android') {\n      if (!(channel instanceof AndroidChannel)) {\n        throw new Error(`AndroidNotifications:createChannel expects an 'AndroidChannel' but got type ${typeof channel}`);\n      }\n\n      return getNativeModule(this._notifications).createChannel(channel.build());\n    }\n\n    return Promise.resolve();\n  }\n\n  createChannelGroup(channelGroup) {\n    if (Platform.OS === 'android') {\n      if (!(channelGroup instanceof AndroidChannelGroup)) {\n        throw new Error(`AndroidNotifications:createChannelGroup expects an 'AndroidChannelGroup' but got type ${typeof channelGroup}`);\n      }\n\n      return getNativeModule(this._notifications).createChannelGroup(channelGroup.build());\n    }\n\n    return Promise.resolve();\n  }\n\n  createChannelGroups(channelGroups) {\n    if (Platform.OS === 'android') {\n      if (!Array.isArray(channelGroups)) {\n        throw new Error(`AndroidNotifications:createChannelGroups expects an 'Array' but got type ${typeof channelGroups}`);\n      }\n\n      const nativeChannelGroups = [];\n\n      for (let i = 0; i < channelGroups.length; i++) {\n        const channelGroup = channelGroups[i];\n\n        if (!(channelGroup instanceof AndroidChannelGroup)) {\n          throw new Error(`AndroidNotifications:createChannelGroups expects array items of type 'AndroidChannelGroup' but got type ${typeof channelGroup}`);\n        }\n\n        nativeChannelGroups.push(channelGroup.build());\n      }\n\n      return getNativeModule(this._notifications).createChannelGroups(nativeChannelGroups);\n    }\n\n    return Promise.resolve();\n  }\n\n  createChannels(channels) {\n    if (Platform.OS === 'android') {\n      if (!Array.isArray(channels)) {\n        throw new Error(`AndroidNotifications:createChannels expects an 'Array' but got type ${typeof channels}`);\n      }\n\n      const nativeChannels = [];\n\n      for (let i = 0; i < channels.length; i++) {\n        const channel = channels[i];\n\n        if (!(channel instanceof AndroidChannel)) {\n          throw new Error(`AndroidNotifications:createChannels expects array items of type 'AndroidChannel' but got type ${typeof channel}`);\n        }\n\n        nativeChannels.push(channel.build());\n      }\n\n      return getNativeModule(this._notifications).createChannels(nativeChannels);\n    }\n\n    return Promise.resolve();\n  }\n\n  removeDeliveredNotificationsByTag(tag) {\n    if (Platform.OS === 'android') {\n      if (typeof tag !== 'string') {\n        throw new Error(`AndroidNotifications:removeDeliveredNotificationsByTag expects an 'string' but got type ${typeof tag}`);\n      }\n\n      return getNativeModule(this._notifications).removeDeliveredNotificationsByTag(tag);\n    }\n\n    return Promise.resolve();\n  }\n\n  deleteChannelGroup(groupId) {\n    if (Platform.OS === 'android') {\n      if (typeof groupId !== 'string') {\n        throw new Error(`AndroidNotifications:deleteChannelGroup expects an 'string' but got type ${typeof groupId}`);\n      }\n\n      return getNativeModule(this._notifications).deleteChannelGroup(groupId);\n    }\n\n    return Promise.resolve();\n  }\n\n  deleteChannel(channelId) {\n    if (Platform.OS === 'android') {\n      if (typeof channelId !== 'string') {\n        throw new Error(`AndroidNotifications:deleteChannel expects an 'string' but got type ${typeof channelId}`);\n      }\n\n      return getNativeModule(this._notifications).deleteChannel(channelId);\n    }\n\n    return Promise.resolve();\n  }\n\n  getChannel(channelId) {\n    if (Platform.OS === 'android') {\n      if (typeof channelId !== 'string') {\n        throw new Error(`AndroidNotifications:getChannel expects an 'string' but got type ${typeof channelId}`);\n      }\n\n      return Promise.resolve(getNativeModule(this._notifications).getChannel(channelId));\n    }\n\n    return Promise.resolve(null);\n  }\n\n  getChannels() {\n    if (Platform.OS === 'android') {\n      return Promise.resolve(getNativeModule(this._notifications).getChannels());\n    }\n\n    return Promise.resolve([]);\n  }\n\n  getChannelGroup(channelGroupId) {\n    if (Platform.OS === 'android') {\n      if (typeof channelGroupId !== 'string') {\n        throw new Error(`AndroidNotifications:getChannel expects an 'string' but got type ${typeof channelGroupId}`);\n      }\n\n      return Promise.resolve(getNativeModule(this._notifications).getChannelGroup(channelGroupId));\n    }\n\n    return Promise.resolve(null);\n  }\n\n  getChannelGroups() {\n    if (Platform.OS === 'android') {\n      return Promise.resolve(getNativeModule(this._notifications).getChannelGroups());\n    }\n\n    return Promise.resolve([]);\n  }\n\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}