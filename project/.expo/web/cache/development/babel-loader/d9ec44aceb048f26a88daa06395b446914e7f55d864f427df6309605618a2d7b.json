{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport { getAppEventName, SharedEventEmitter } from \"../../utils/events\";\nimport { getLogger } from \"../../utils/log\";\nimport { getNativeModule } from \"../../utils/native\";\nvar transactionId = 0;\nvar generateTransactionId = function generateTransactionId() {\n  return transactionId++;\n};\nvar TransactionHandler = function () {\n  function TransactionHandler(database) {\n    _classCallCheck(this, TransactionHandler);\n    this._transactions = {};\n    this._database = database;\n    SharedEventEmitter.addListener(getAppEventName(this._database, 'database_transaction_event'), this._handleTransactionEvent.bind(this));\n  }\n  return _createClass(TransactionHandler, [{\n    key: \"add\",\n    value: function add(reference, transactionUpdater, onComplete) {\n      var applyLocally = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n      var id = generateTransactionId();\n      this._transactions[id] = {\n        id: id,\n        reference: reference,\n        transactionUpdater: transactionUpdater,\n        onComplete: onComplete,\n        applyLocally: applyLocally,\n        completed: false,\n        started: true\n      };\n      getNativeModule(this._database).transactionStart(reference.path, id, applyLocally);\n    }\n  }, {\n    key: \"_handleTransactionEvent\",\n    value: function _handleTransactionEvent() {\n      var event = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      switch (event.type) {\n        case 'update':\n          return this._handleUpdate(event);\n        case 'error':\n          return this._handleError(event);\n        case 'complete':\n          return this._handleComplete(event);\n        default:\n          getLogger(this._database).warn(`Unknown transaction event type: '${event.type}'`, event);\n          return undefined;\n      }\n    }\n  }, {\n    key: \"_handleUpdate\",\n    value: function _handleUpdate() {\n      var event = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var newValue;\n      var id = event.id,\n        value = event.value;\n      try {\n        var transaction = this._transactions[id];\n        if (!transaction) return;\n        newValue = transaction.transactionUpdater(value);\n      } finally {\n        var abort = false;\n        if (newValue === undefined) {\n          abort = true;\n        }\n        getNativeModule(this._database).transactionTryCommit(id, {\n          value: newValue,\n          abort: abort\n        });\n      }\n    }\n  }, {\n    key: \"_handleError\",\n    value: function _handleError() {\n      var _this = this;\n      var event = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var transaction = this._transactions[event.id];\n      if (transaction && !transaction.completed) {\n        transaction.completed = true;\n        try {\n          transaction.onComplete(event.error, false, null);\n        } finally {\n          setImmediate(function () {\n            delete _this._transactions[event.id];\n          });\n        }\n      }\n    }\n  }, {\n    key: \"_handleComplete\",\n    value: function _handleComplete() {\n      var _this2 = this;\n      var event = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var transaction = this._transactions[event.id];\n      if (transaction && !transaction.completed) {\n        transaction.completed = true;\n        try {\n          transaction.onComplete(null, event.committed, Object.assign({}, event.snapshot));\n        } finally {\n          setImmediate(function () {\n            delete _this2._transactions[event.id];\n          });\n        }\n      }\n    }\n  }]);\n}();\nexport { TransactionHandler as default };","map":{"version":3,"names":["getAppEventName","SharedEventEmitter","getLogger","getNativeModule","transactionId","generateTransactionId","TransactionHandler","database","_classCallCheck","_transactions","_database","addListener","_handleTransactionEvent","bind","_createClass","key","value","add","reference","transactionUpdater","onComplete","applyLocally","arguments","length","undefined","id","completed","started","transactionStart","path","event","type","_handleUpdate","_handleError","_handleComplete","warn","newValue","transaction","abort","transactionTryCommit","_this","error","setImmediate","_this2","committed","Object","assign","snapshot","default"],"sources":["C:/Users/Johnny Hermitano/Documents/GitHub/sofdes_watermelon/project/node_modules/react-native-firebase/dist/modules/database/transaction.js"],"sourcesContent":["/**\n * \n * Database Transaction representation wrapper\n */\nimport { getAppEventName, SharedEventEmitter } from '../../utils/events';\nimport { getLogger } from '../../utils/log';\nimport { getNativeModule } from '../../utils/native';\nlet transactionId = 0;\n/**\n * Uses the push id generator to create a transaction id\n * @returns {number}\n * @private\n */\n\nconst generateTransactionId = () => transactionId++;\n/**\n * @class TransactionHandler\n */\n\n\nexport default class TransactionHandler {\n  constructor(database) {\n    this._transactions = {};\n    this._database = database;\n    SharedEventEmitter.addListener(getAppEventName(this._database, 'database_transaction_event'), this._handleTransactionEvent.bind(this));\n  }\n  /**\n   * Add a new transaction and start it natively.\n   * @param reference\n   * @param transactionUpdater\n   * @param onComplete\n   * @param applyLocally\n   */\n\n\n  add(reference, transactionUpdater, onComplete, applyLocally = false) {\n    const id = generateTransactionId();\n    this._transactions[id] = {\n      id,\n      reference,\n      transactionUpdater,\n      onComplete,\n      applyLocally,\n      completed: false,\n      started: true\n    };\n    getNativeModule(this._database).transactionStart(reference.path, id, applyLocally);\n  }\n  /**\n   *  INTERNALS\n   */\n\n  /**\n   *\n   * @param event\n   * @returns {*}\n   * @private\n   */\n\n\n  _handleTransactionEvent(event = {}) {\n    switch (event.type) {\n      case 'update':\n        return this._handleUpdate(event);\n\n      case 'error':\n        return this._handleError(event);\n\n      case 'complete':\n        return this._handleComplete(event);\n\n      default:\n        getLogger(this._database).warn(`Unknown transaction event type: '${event.type}'`, event);\n        return undefined;\n    }\n  }\n  /**\n   *\n   * @param event\n   * @private\n   */\n\n\n  _handleUpdate(event = {}) {\n    let newValue;\n    const {\n      id,\n      value\n    } = event;\n\n    try {\n      const transaction = this._transactions[id];\n      if (!transaction) return;\n      newValue = transaction.transactionUpdater(value);\n    } finally {\n      let abort = false;\n\n      if (newValue === undefined) {\n        abort = true;\n      }\n\n      getNativeModule(this._database).transactionTryCommit(id, {\n        value: newValue,\n        abort\n      });\n    }\n  }\n  /**\n   *\n   * @param event\n   * @private\n   */\n\n\n  _handleError(event = {}) {\n    const transaction = this._transactions[event.id];\n\n    if (transaction && !transaction.completed) {\n      transaction.completed = true;\n\n      try {\n        transaction.onComplete(event.error, false, null);\n      } finally {\n        setImmediate(() => {\n          delete this._transactions[event.id];\n        });\n      }\n    }\n  }\n  /**\n   *\n   * @param event\n   * @private\n   */\n\n\n  _handleComplete(event = {}) {\n    const transaction = this._transactions[event.id];\n\n    if (transaction && !transaction.completed) {\n      transaction.completed = true;\n\n      try {\n        transaction.onComplete(null, event.committed, Object.assign({}, event.snapshot));\n      } finally {\n        setImmediate(() => {\n          delete this._transactions[event.id];\n        });\n      }\n    }\n  }\n\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}