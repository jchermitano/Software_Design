{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport NativeEventEmitter from \"react-native-web/dist/exports/NativeEventEmitter\";\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport { SharedEventEmitter } from \"./events\";\nimport DataSnapshot from \"../modules/database/DataSnapshot\";\nimport DatabaseReference from \"../modules/database/Reference\";\nimport { isString, nativeToJSError } from \"./\";\nvar SyncTree = function () {\n  function SyncTree() {\n    _classCallCheck(this, SyncTree);\n    this._tree = {};\n    this._reverseLookup = {};\n    if (NativeModules.RNFirebaseDatabase) {\n      this._nativeEmitter = new NativeEventEmitter(NativeModules.RNFirebaseDatabase);\n      this._nativeEmitter.addListener('database_sync_event', this._handleSyncEvent.bind(this));\n    }\n  }\n  return _createClass(SyncTree, [{\n    key: \"_handleSyncEvent\",\n    value: function _handleSyncEvent(event) {\n      if (event.error) {\n        this._handleErrorEvent(event);\n      } else {\n        this._handleValueEvent(event);\n      }\n    }\n  }, {\n    key: \"_handleValueEvent\",\n    value: function _handleValueEvent(event) {\n      var _event$registration = event.registration,\n        key = _event$registration.key,\n        eventRegistrationKey = _event$registration.eventRegistrationKey;\n      var registration = this.getRegistration(eventRegistrationKey);\n      if (!registration) {\n        return NativeModules.RNFirebaseDatabase.off(key, eventRegistrationKey);\n      }\n      var _event$data = event.data,\n        snapshot = _event$data.snapshot,\n        previousChildName = _event$data.previousChildName;\n      return SharedEventEmitter.emit(eventRegistrationKey, new DataSnapshot(registration.ref, snapshot), previousChildName);\n    }\n  }, {\n    key: \"_handleErrorEvent\",\n    value: function _handleErrorEvent(event) {\n      var _event$error = event.error,\n        code = _event$error.code,\n        message = _event$error.message;\n      var _event$registration2 = event.registration,\n        eventRegistrationKey = _event$registration2.eventRegistrationKey,\n        registrationCancellationKey = _event$registration2.registrationCancellationKey;\n      var registration = this.getRegistration(registrationCancellationKey);\n      if (registration) {\n        var error = nativeToJSError(code, message, {\n          ref: registration.ref\n        });\n        SharedEventEmitter.emit(registrationCancellationKey, error);\n        this.removeRegistration(eventRegistrationKey);\n      }\n    }\n  }, {\n    key: \"getRegistration\",\n    value: function getRegistration(registration) {\n      return this._reverseLookup[registration] ? Object.assign({}, this._reverseLookup[registration]) : null;\n    }\n  }, {\n    key: \"removeListenersForRegistrations\",\n    value: function removeListenersForRegistrations(registrations) {\n      if (isString(registrations)) {\n        this.removeRegistration(registrations);\n        SharedEventEmitter.removeAllListeners(registrations);\n        return 1;\n      }\n      if (!Array.isArray(registrations)) return 0;\n      for (var i = 0, len = registrations.length; i < len; i++) {\n        this.removeRegistration(registrations[i]);\n        SharedEventEmitter.removeAllListeners(registrations[i]);\n      }\n      return registrations.length;\n    }\n  }, {\n    key: \"removeListenerRegistrations\",\n    value: function removeListenerRegistrations(listener, registrations) {\n      if (!Array.isArray(registrations)) return [];\n      var removed = [];\n      for (var i = 0, len = registrations.length; i < len; i++) {\n        var registration = registrations[i];\n        var subscriptions = SharedEventEmitter._subscriber.getSubscriptionsForType(registration);\n        if (subscriptions) {\n          for (var j = 0, l = subscriptions.length; j < l; j++) {\n            var subscription = subscriptions[j];\n            if (subscription && subscription.listener === listener) {\n              subscription.remove();\n              removed.push(registration);\n              this.removeRegistration(registration);\n            }\n          }\n        }\n      }\n      return removed;\n    }\n  }, {\n    key: \"getRegistrationsByPath\",\n    value: function getRegistrationsByPath(path) {\n      var out = [];\n      var eventKeys = Object.keys(this._tree[path] || {});\n      for (var i = 0, len = eventKeys.length; i < len; i++) {\n        Array.prototype.push.apply(out, Object.keys(this._tree[path][eventKeys[i]]));\n      }\n      return out;\n    }\n  }, {\n    key: \"getRegistrationsByPathEvent\",\n    value: function getRegistrationsByPathEvent(path, eventType) {\n      if (!this._tree[path]) return [];\n      if (!this._tree[path][eventType]) return [];\n      return Object.keys(this._tree[path][eventType]);\n    }\n  }, {\n    key: \"getOneByPathEventListener\",\n    value: function getOneByPathEventListener(path, eventType, listener) {\n      if (!this._tree[path]) return null;\n      if (!this._tree[path][eventType]) return null;\n      var registrationsForPathEvent = Object.entries(this._tree[path][eventType]);\n      for (var i = 0; i < registrationsForPathEvent.length; i++) {\n        var registration = registrationsForPathEvent[i];\n        if (registration[1] === listener) return registration[0];\n      }\n      return null;\n    }\n  }, {\n    key: \"addRegistration\",\n    value: function addRegistration(registration) {\n      var eventRegistrationKey = registration.eventRegistrationKey,\n        eventType = registration.eventType,\n        listener = registration.listener,\n        once = registration.once,\n        path = registration.path;\n      if (!this._tree[path]) this._tree[path] = {};\n      if (!this._tree[path][eventType]) this._tree[path][eventType] = {};\n      this._tree[path][eventType][eventRegistrationKey] = listener;\n      this._reverseLookup[eventRegistrationKey] = registration;\n      if (once) {\n        SharedEventEmitter.once(eventRegistrationKey, this._onOnceRemoveRegistration(eventRegistrationKey, listener));\n      } else {\n        SharedEventEmitter.addListener(eventRegistrationKey, listener);\n      }\n      return eventRegistrationKey;\n    }\n  }, {\n    key: \"removeRegistration\",\n    value: function removeRegistration(registration) {\n      if (!this._reverseLookup[registration]) return false;\n      var _this$_reverseLookup$ = this._reverseLookup[registration],\n        path = _this$_reverseLookup$.path,\n        eventType = _this$_reverseLookup$.eventType,\n        once = _this$_reverseLookup$.once;\n      if (!this._tree[path]) {\n        delete this._reverseLookup[registration];\n        return false;\n      }\n      if (!this._tree[path][eventType]) {\n        delete this._reverseLookup[registration];\n        return false;\n      }\n      var registrationObj = this._reverseLookup[registration];\n      if (registrationObj && !once) {\n        NativeModules.RNFirebaseDatabase.off(registrationObj.key, registration);\n      }\n      delete this._tree[path][eventType][registration];\n      delete this._reverseLookup[registration];\n      return !!registrationObj;\n    }\n  }, {\n    key: \"_onOnceRemoveRegistration\",\n    value: function _onOnceRemoveRegistration(registration, listener) {\n      var _this = this;\n      return function () {\n        _this.removeRegistration(registration);\n        listener.apply(void 0, arguments);\n      };\n    }\n  }]);\n}();\nexport default new SyncTree();","map":{"version":3,"names":["SharedEventEmitter","DataSnapshot","DatabaseReference","isString","nativeToJSError","SyncTree","_classCallCheck","_tree","_reverseLookup","NativeModules","RNFirebaseDatabase","_nativeEmitter","NativeEventEmitter","addListener","_handleSyncEvent","bind","_createClass","key","value","event","error","_handleErrorEvent","_handleValueEvent","_event$registration","registration","eventRegistrationKey","getRegistration","off","_event$data","data","snapshot","previousChildName","emit","ref","_event$error","code","message","_event$registration2","registrationCancellationKey","removeRegistration","Object","assign","removeListenersForRegistrations","registrations","removeAllListeners","Array","isArray","i","len","length","removeListenerRegistrations","listener","removed","subscriptions","_subscriber","getSubscriptionsForType","j","l","subscription","remove","push","getRegistrationsByPath","path","out","eventKeys","keys","prototype","apply","getRegistrationsByPathEvent","eventType","getOneByPathEventListener","registrationsForPathEvent","entries","addRegistration","once","_onOnceRemoveRegistration","_this$_reverseLookup$","registrationObj","_this","arguments"],"sources":["C:/Users/Johnny Hermitano/Documents/GitHub/sofdes_watermelon/project/node_modules/react-native-firebase/dist/utils/SyncTree.js"],"sourcesContent":["import { NativeEventEmitter, NativeModules } from 'react-native';\nimport { SharedEventEmitter } from './events';\nimport DataSnapshot from '../modules/database/DataSnapshot';\nimport DatabaseReference from '../modules/database/Reference';\nimport { isString, nativeToJSError } from './';\n\n/**\n * Internally used to manage firebase database realtime event\n * subscriptions and keep the listeners in sync in js vs native.\n */\nclass SyncTree {\n  constructor() {\n    this._tree = {};\n    this._reverseLookup = {};\n\n    if (NativeModules.RNFirebaseDatabase) {\n      this._nativeEmitter = new NativeEventEmitter(NativeModules.RNFirebaseDatabase);\n\n      this._nativeEmitter.addListener('database_sync_event', this._handleSyncEvent.bind(this));\n    }\n  }\n  /**\n   *\n   * @param event\n   * @private\n   */\n\n\n  _handleSyncEvent(event) {\n    if (event.error) {\n      this._handleErrorEvent(event);\n    } else {\n      this._handleValueEvent(event);\n    }\n  }\n  /**\n   * Routes native database 'on' events to their js equivalent counterpart.\n   * If there is no longer any listeners remaining for this event we internally\n   * call the native unsub method to prevent further events coming through.\n   *\n   * @param event\n   * @private\n   */\n\n\n  _handleValueEvent(event) {\n    // console.log('SyncTree.VALUE >>>', event);\n    const {\n      key,\n      eventRegistrationKey\n    } = event.registration;\n    const registration = this.getRegistration(eventRegistrationKey);\n\n    if (!registration) {\n      // registration previously revoked\n      // notify native that the registration\n      // no longer exists so it can remove\n      // the native listeners\n      return NativeModules.RNFirebaseDatabase.off(key, eventRegistrationKey);\n    }\n\n    const {\n      snapshot,\n      previousChildName\n    } = event.data; // forward on to users .on(successCallback <-- listener\n\n    return SharedEventEmitter.emit(eventRegistrationKey, new DataSnapshot(registration.ref, snapshot), previousChildName);\n  }\n  /**\n   * Routes native database query listener cancellation events to their js counterparts.\n   *\n   * @param event\n   * @private\n   */\n\n\n  _handleErrorEvent(event) {\n    // console.log('SyncTree.ERROR >>>', event);\n    const {\n      code,\n      message\n    } = event.error;\n    const {\n      eventRegistrationKey,\n      registrationCancellationKey\n    } = event.registration;\n    const registration = this.getRegistration(registrationCancellationKey);\n\n    if (registration) {\n      // build a new js error - we additionally attach\n      // the ref as a property for easier debugging\n      const error = nativeToJSError(code, message, {\n        ref: registration.ref\n      }); // forward on to users .on(successCallback, cancellationCallback <-- listener\n\n      SharedEventEmitter.emit(registrationCancellationKey, error); // remove the paired event registration - if we received a cancellation\n      // event then it's guaranteed that they'll be no further value events\n\n      this.removeRegistration(eventRegistrationKey);\n    }\n  }\n  /**\n   * Returns registration information such as appName, ref, path and registration keys.\n   *\n   * @param registration\n   * @return {null}\n   */\n\n\n  getRegistration(registration) {\n    return this._reverseLookup[registration] ? Object.assign({}, this._reverseLookup[registration]) : null;\n  }\n  /**\n   * Removes all listeners for the specified registration keys.\n   *\n   * @param registrations\n   * @return {number}\n   */\n\n\n  removeListenersForRegistrations(registrations) {\n    if (isString(registrations)) {\n      this.removeRegistration(registrations);\n      SharedEventEmitter.removeAllListeners(registrations);\n      return 1;\n    }\n\n    if (!Array.isArray(registrations)) return 0;\n\n    for (let i = 0, len = registrations.length; i < len; i++) {\n      this.removeRegistration(registrations[i]);\n      SharedEventEmitter.removeAllListeners(registrations[i]);\n    }\n\n    return registrations.length;\n  }\n  /**\n   * Removes a specific listener from the specified registrations.\n   *\n   * @param listener\n   * @param registrations\n   * @return {Array} array of registrations removed\n   */\n\n\n  removeListenerRegistrations(listener, registrations) {\n    if (!Array.isArray(registrations)) return [];\n    const removed = [];\n\n    for (let i = 0, len = registrations.length; i < len; i++) {\n      const registration = registrations[i];\n\n      const subscriptions = SharedEventEmitter._subscriber.getSubscriptionsForType(registration);\n\n      if (subscriptions) {\n        for (let j = 0, l = subscriptions.length; j < l; j++) {\n          const subscription = subscriptions[j]; // The subscription may have been removed during this event loop.\n          // its listener matches the listener in method parameters\n\n          if (subscription && subscription.listener === listener) {\n            subscription.remove();\n            removed.push(registration);\n            this.removeRegistration(registration);\n          }\n        }\n      }\n    }\n\n    return removed;\n  }\n  /**\n   * Returns an array of all registration keys for the specified path.\n   *\n   * @param path\n   * @return {Array}\n   */\n\n\n  getRegistrationsByPath(path) {\n    const out = [];\n    const eventKeys = Object.keys(this._tree[path] || {});\n\n    for (let i = 0, len = eventKeys.length; i < len; i++) {\n      Array.prototype.push.apply(out, Object.keys(this._tree[path][eventKeys[i]]));\n    }\n\n    return out;\n  }\n  /**\n   * Returns an array of all registration keys for the specified path and eventType.\n   *\n   * @param path\n   * @param eventType\n   * @return {Array}\n   */\n\n\n  getRegistrationsByPathEvent(path, eventType) {\n    if (!this._tree[path]) return [];\n    if (!this._tree[path][eventType]) return [];\n    return Object.keys(this._tree[path][eventType]);\n  }\n  /**\n   * Returns a single registration key for the specified path, eventType, and listener\n   *\n   * @param path\n   * @param eventType\n   * @param listener\n   * @return {Array}\n   */\n\n\n  getOneByPathEventListener(path, eventType, listener) {\n    if (!this._tree[path]) return null;\n    if (!this._tree[path][eventType]) return null;\n    const registrationsForPathEvent = Object.entries(this._tree[path][eventType]);\n\n    for (let i = 0; i < registrationsForPathEvent.length; i++) {\n      const registration = registrationsForPathEvent[i];\n      if (registration[1] === listener) return registration[0];\n    }\n\n    return null;\n  }\n  /**\n   * Register a new listener.\n   *\n   * @param parameters\n   * @param listener\n   * @return {String}\n   */\n\n\n  addRegistration(registration) {\n    const {\n      eventRegistrationKey,\n      eventType,\n      listener,\n      once,\n      path\n    } = registration;\n    if (!this._tree[path]) this._tree[path] = {};\n    if (!this._tree[path][eventType]) this._tree[path][eventType] = {};\n    this._tree[path][eventType][eventRegistrationKey] = listener;\n    this._reverseLookup[eventRegistrationKey] = registration;\n\n    if (once) {\n      SharedEventEmitter.once(eventRegistrationKey, this._onOnceRemoveRegistration(eventRegistrationKey, listener));\n    } else {\n      SharedEventEmitter.addListener(eventRegistrationKey, listener);\n    }\n\n    return eventRegistrationKey;\n  }\n  /**\n   * Remove a registration, if it's not a `once` registration then instructs native\n   * to also remove the underlying database query listener.\n   *\n   * @param registration\n   * @return {boolean}\n   */\n\n\n  removeRegistration(registration) {\n    if (!this._reverseLookup[registration]) return false;\n    const {\n      path,\n      eventType,\n      once\n    } = this._reverseLookup[registration];\n\n    if (!this._tree[path]) {\n      delete this._reverseLookup[registration];\n      return false;\n    }\n\n    if (!this._tree[path][eventType]) {\n      delete this._reverseLookup[registration];\n      return false;\n    } // we don't want `once` events to notify native as they're already\n    // automatically unsubscribed on native when the first event is sent\n\n\n    const registrationObj = this._reverseLookup[registration];\n\n    if (registrationObj && !once) {\n      NativeModules.RNFirebaseDatabase.off(registrationObj.key, registration);\n    }\n\n    delete this._tree[path][eventType][registration];\n    delete this._reverseLookup[registration];\n    return !!registrationObj;\n  }\n  /**\n   * Wraps a `once` listener with a new function that self de-registers.\n   *\n   * @param registration\n   * @param listener\n   * @return {function(...[*])}\n   * @private\n   */\n\n\n  _onOnceRemoveRegistration(registration, listener) {\n    return (...args) => {\n      this.removeRegistration(registration);\n      listener(...args);\n    };\n  }\n\n}\n\nexport default new SyncTree();"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}