{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useEffect, useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport { PieChart } from 'react-native-chart-kit';\nimport { get, ref } from 'firebase/database';\nimport { db } from \"../config\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar chartConfig = {\n  backgroundColor: 'transparent',\n  backgroundGradientFrom: '#eff3ff',\n  backgroundGradientTo: '#efefef',\n  decimalPlaces: 0,\n  color: function color() {\n    var opacity = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    return `rgba(0, 0, 0, ${opacity})`;\n  },\n  style: {\n    borderRadius: 16\n  }\n};\nvar PieGraph = function PieGraph() {\n  var _useState = useState([]),\n    _useState2 = _slicedToArray(_useState, 2),\n    varietyData = _useState2[0],\n    setVarietyData = _useState2[1];\n  useEffect(function () {\n    var usersRef = ref(db);\n    get(usersRef).then(function (snapshot) {\n      if (snapshot.exists()) {\n        var usersArray = Object.values(snapshot.val());\n        var varietyCounts = usersArray.reduce(function (acc, user) {\n          acc[user.variety] = (acc[user.variety] || 0) + 1;\n          return acc;\n        }, {});\n        var formattedData = Object.keys(varietyCounts).map(function (variety, index) {\n          return {\n            name: variety,\n            population: varietyCounts[variety],\n            color: getColor(index),\n            legendFontColor: 'white',\n            legendFontSize: 20\n          };\n        });\n        setVarietyData(formattedData);\n      } else {\n        console.log('No data available');\n      }\n    }).catch(function (error) {\n      console.error(error);\n    });\n  }, []);\n  var getColor = function getColor(index) {\n    var colors = ['#F00', '#0F0', '#00F', '#FF0', '#F0F', '#0FF', '#800', '#080', '#008'];\n    return colors[index % colors.length];\n  };\n  return _jsx(View, {\n    style: styles.container,\n    children: _jsx(PieChart, {\n      data: varietyData,\n      width: 500,\n      height: 420,\n      chartConfig: chartConfig,\n      accessor: 'population',\n      backgroundColor: 'transparent',\n      paddingLeft: '50',\n      absolute: true\n    })\n  });\n};\nexport default PieGraph;\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n});","map":{"version":3,"names":["React","useEffect","useState","View","StyleSheet","Dimensions","PieChart","get","ref","db","jsx","_jsx","chartConfig","backgroundColor","backgroundGradientFrom","backgroundGradientTo","decimalPlaces","color","opacity","arguments","length","undefined","style","borderRadius","PieGraph","_useState","_useState2","_slicedToArray","varietyData","setVarietyData","usersRef","then","snapshot","exists","usersArray","Object","values","val","varietyCounts","reduce","acc","user","variety","formattedData","keys","map","index","name","population","getColor","legendFontColor","legendFontSize","console","log","catch","error","colors","styles","container","children","data","width","height","accessor","paddingLeft","absolute","create","flex","alignItems","justifyContent"],"sources":["C:/Users/Johnny Hermitano/Documents/GitHub/sofdes_watermelon/project/component/chart.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { View, StyleSheet, Dimensions } from 'react-native';\r\nimport { PieChart } from 'react-native-chart-kit';\r\nimport { get, ref } from 'firebase/database';\r\nimport { db } from '../config';\r\n\r\nconst chartConfig = {\r\n  backgroundColor: 'transparent',\r\n  backgroundGradientFrom: '#eff3ff',\r\n  backgroundGradientTo: '#efefef',\r\n  decimalPlaces: 0,\r\n  color: (opacity = 1) => `rgba(0, 0, 0, ${opacity})`,\r\n  style: {\r\n    borderRadius: 16,\r\n  },\r\n};\r\n\r\n\r\nconst PieGraph = () => {\r\n  const [varietyData, setVarietyData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const usersRef = ref(db);\r\n    get(usersRef).then((snapshot) => {\r\n      if (snapshot.exists()) {\r\n        const usersArray = Object.values(snapshot.val());\r\n        const varietyCounts = usersArray.reduce((acc, user) => {\r\n          acc[user.variety] = (acc[user.variety] || 0) + 1;\r\n          return acc;\r\n        }, {});\r\n\r\n        const formattedData = Object.keys(varietyCounts).map((variety, index) => ({\r\n          name: variety,\r\n          population: varietyCounts[variety],\r\n          color: getColor(index),\r\n          legendFontColor: 'white',\r\n          legendFontSize: 20,\r\n        }));\r\n\r\n        setVarietyData(formattedData);\r\n      } else {\r\n        console.log('No data available');\r\n      }\r\n    }).catch((error) => {\r\n      console.error(error);\r\n    });\r\n  }, []);\r\n\r\n  const getColor = (index) => {\r\n    const colors = ['#F00', '#0F0', '#00F', '#FF0', '#F0F', '#0FF', '#800', '#080', '#008'];\r\n    return colors[index % colors.length];\r\n  };\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <PieChart\r\n        data={varietyData}\r\n        width={500}\r\n        height={420}\r\n        chartConfig={chartConfig}\r\n        accessor={'population'}\r\n        backgroundColor={'transparent'}\r\n        paddingLeft={'50'}\r\n        absolute\r\n      />\r\n    </View>\r\n  );\r\n};\r\n\r\nexport default PieGraph;\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n  },\r\n});\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}