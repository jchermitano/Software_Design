{"ast":null,"code":"import NativeEventEmitter from \"react-native-web/dist/exports/NativeEventEmitter\";\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport EventEmitter from 'react-native/Libraries/vendor/emitter/EventEmitter';\nvar NATIVE_EMITTERS = {};\nvar NATIVE_SUBSCRIPTIONS = {};\nexport var SharedEventEmitter = new EventEmitter();\nexport var getAppEventName = function getAppEventName(module, eventName) {\n  return `${module.app.name}-${eventName}`;\n};\nvar getNativeEmitter = function getNativeEmitter(moduleName, module) {\n  var name = `${module.app.name}-${moduleName}`;\n  var nativeModule = NativeModules[moduleName];\n  if (!NATIVE_EMITTERS[name]) {\n    NATIVE_EMITTERS[name] = new NativeEventEmitter(nativeModule);\n  }\n  return NATIVE_EMITTERS[name];\n};\nvar subscribeToNativeModuleEvents = function subscribeToNativeModuleEvents(moduleName, module, eventName) {\n  if (!NATIVE_SUBSCRIPTIONS[eventName]) {\n    var nativeEmitter = getNativeEmitter(moduleName, module);\n    nativeEmitter.addListener(eventName, function (event) {\n      if (event.appName) {\n        SharedEventEmitter.emit(`${event.appName}-${eventName}`, event);\n      } else {\n        SharedEventEmitter.emit(eventName, event);\n      }\n    });\n    NATIVE_SUBSCRIPTIONS[eventName] = true;\n  }\n};\nexport var initialiseNativeModuleEventEmitter = function initialiseNativeModuleEventEmitter(module, config) {\n  var events = config.events,\n    moduleName = config.moduleName;\n  if (events && events.length) {\n    for (var i = 0, len = events.length; i < len; i++) {\n      subscribeToNativeModuleEvents(moduleName, module, events[i]);\n    }\n  }\n};","map":{"version":3,"names":["EventEmitter","NATIVE_EMITTERS","NATIVE_SUBSCRIPTIONS","SharedEventEmitter","getAppEventName","module","eventName","app","name","getNativeEmitter","moduleName","nativeModule","NativeModules","NativeEventEmitter","subscribeToNativeModuleEvents","nativeEmitter","addListener","event","appName","emit","initialiseNativeModuleEventEmitter","config","events","length","i","len"],"sources":["C:/Users/Johnny Hermitano/Documents/GitHub/sofdes_watermelon/project/node_modules/react-native-firebase/dist/utils/events.js"],"sourcesContent":["import { NativeEventEmitter, NativeModules } from 'react-native';\nimport EventEmitter from 'react-native/Libraries/vendor/emitter/EventEmitter';\nconst NATIVE_EMITTERS = {};\nconst NATIVE_SUBSCRIPTIONS = {};\nexport const SharedEventEmitter = new EventEmitter();\nexport const getAppEventName = (module, eventName) => `${module.app.name}-${eventName}`;\n\nconst getNativeEmitter = (moduleName, module) => {\n  const name = `${module.app.name}-${moduleName}`;\n  const nativeModule = NativeModules[moduleName];\n\n  if (!NATIVE_EMITTERS[name]) {\n    NATIVE_EMITTERS[name] = new NativeEventEmitter(nativeModule);\n  }\n\n  return NATIVE_EMITTERS[name];\n};\n/**\n * Subscribe to a native event for js side distribution by appName\n *    React Native events are hard set at compile - cant do dynamic event names\n *    so we use a single event send it to js and js then internally can prefix it\n *    and distribute dynamically.\n *\n * @param moduleName\n * @param module\n * @param eventName\n * @private\n */\n\n\nconst subscribeToNativeModuleEvents = (moduleName, module, eventName) => {\n  if (!NATIVE_SUBSCRIPTIONS[eventName]) {\n    const nativeEmitter = getNativeEmitter(moduleName, module);\n    nativeEmitter.addListener(eventName, event => {\n      if (event.appName) {\n        // native event has an appName property - auto prefix and internally emit\n        SharedEventEmitter.emit(`${event.appName}-${eventName}`, event);\n      } else {\n        // standard event - no need to prefix\n        SharedEventEmitter.emit(eventName, event);\n      }\n    });\n    NATIVE_SUBSCRIPTIONS[eventName] = true;\n  }\n};\n\nexport const initialiseNativeModuleEventEmitter = (module, config) => {\n  const {\n    events,\n    moduleName\n  } = config;\n\n  if (events && events.length) {\n    for (let i = 0, len = events.length; i < len; i++) {\n      subscribeToNativeModuleEvents(moduleName, module, events[i]);\n    }\n  }\n};"],"mappings":";;AACA,OAAOA,YAAY,MAAM,oDAAoD;AAC7E,IAAMC,eAAe,GAAG,CAAC,CAAC;AAC1B,IAAMC,oBAAoB,GAAG,CAAC,CAAC;AAC/B,OAAO,IAAMC,kBAAkB,GAAG,IAAIH,YAAY,CAAC,CAAC;AACpD,OAAO,IAAMI,eAAe,GAAG,SAAlBA,eAAeA,CAAIC,MAAM,EAAEC,SAAS;EAAA,OAAM,GAAED,MAAM,CAACE,GAAG,CAACC,IAAK,IAAGF,SAAU,EAAC;AAAA;AAEvF,IAAMG,gBAAgB,GAAG,SAAnBA,gBAAgBA,CAAIC,UAAU,EAAEL,MAAM,EAAK;EAC/C,IAAMG,IAAI,GAAI,GAAEH,MAAM,CAACE,GAAG,CAACC,IAAK,IAAGE,UAAW,EAAC;EAC/C,IAAMC,YAAY,GAAGC,aAAa,CAACF,UAAU,CAAC;EAE9C,IAAI,CAACT,eAAe,CAACO,IAAI,CAAC,EAAE;IAC1BP,eAAe,CAACO,IAAI,CAAC,GAAG,IAAIK,kBAAkB,CAACF,YAAY,CAAC;EAC9D;EAEA,OAAOV,eAAe,CAACO,IAAI,CAAC;AAC9B,CAAC;AAcD,IAAMM,6BAA6B,GAAG,SAAhCA,6BAA6BA,CAAIJ,UAAU,EAAEL,MAAM,EAAEC,SAAS,EAAK;EACvE,IAAI,CAACJ,oBAAoB,CAACI,SAAS,CAAC,EAAE;IACpC,IAAMS,aAAa,GAAGN,gBAAgB,CAACC,UAAU,EAAEL,MAAM,CAAC;IAC1DU,aAAa,CAACC,WAAW,CAACV,SAAS,EAAE,UAAAW,KAAK,EAAI;MAC5C,IAAIA,KAAK,CAACC,OAAO,EAAE;QAEjBf,kBAAkB,CAACgB,IAAI,CAAE,GAAEF,KAAK,CAACC,OAAQ,IAAGZ,SAAU,EAAC,EAAEW,KAAK,CAAC;MACjE,CAAC,MAAM;QAELd,kBAAkB,CAACgB,IAAI,CAACb,SAAS,EAAEW,KAAK,CAAC;MAC3C;IACF,CAAC,CAAC;IACFf,oBAAoB,CAACI,SAAS,CAAC,GAAG,IAAI;EACxC;AACF,CAAC;AAED,OAAO,IAAMc,kCAAkC,GAAG,SAArCA,kCAAkCA,CAAIf,MAAM,EAAEgB,MAAM,EAAK;EACpE,IACEC,MAAM,GAEJD,MAAM,CAFRC,MAAM;IACNZ,UAAU,GACRW,MAAM,CADRX,UAAU;EAGZ,IAAIY,MAAM,IAAIA,MAAM,CAACC,MAAM,EAAE;IAC3B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEC,GAAG,GAAGH,MAAM,CAACC,MAAM,EAAEC,CAAC,GAAGC,GAAG,EAAED,CAAC,EAAE,EAAE;MACjDV,6BAA6B,CAACJ,UAAU,EAAEL,MAAM,EAAEiB,MAAM,CAACE,CAAC,CAAC,CAAC;IAC9D;EACF;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}