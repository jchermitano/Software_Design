{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nfunction _callSuper(_this, derived, args) {\n  function isNativeReflectConstruct() {\n    if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n    if (Reflect.construct.sham) return false;\n    if (typeof Proxy === \"function\") return true;\n    try {\n      return !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    } catch (e) {\n      return false;\n    }\n  }\n  derived = _getPrototypeOf(derived);\n  return _possibleConstructorReturn(_this, isNativeReflectConstruct() ? Reflect.construct(derived, args || [], _getPrototypeOf(_this).constructor) : derived.apply(_this, args));\n}\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport INTERNALS from \"../../utils/internals\";\nimport { isIOS } from \"../../utils\";\nimport ModuleBase from \"../../utils/ModuleBase\";\nimport DatabaseUtils from \"./database\";\nvar FirebaseCoreModule = NativeModules.RNFirebase;\nexport var MODULE_NAME = 'RNFirebaseUtils';\nexport var NAMESPACE = 'utils';\nvar RNFirebaseUtils = function (_ModuleBase) {\n  function RNFirebaseUtils(app) {\n    _classCallCheck(this, RNFirebaseUtils);\n    return _callSuper(this, RNFirebaseUtils, [app, {\n      moduleName: MODULE_NAME,\n      hasMultiAppSupport: false,\n      hasCustomUrlSupport: false,\n      namespace: NAMESPACE\n    }]);\n  }\n  _inherits(RNFirebaseUtils, _ModuleBase);\n  return _createClass(RNFirebaseUtils, [{\n    key: \"database\",\n    get: function get() {\n      return DatabaseUtils;\n    }\n  }, {\n    key: \"checkPlayServicesAvailability\",\n    value: function checkPlayServicesAvailability() {\n      if (isIOS) return;\n      var status = this.playServicesAvailability.status;\n      if (!this.playServicesAvailability.isAvailable) {\n        if (INTERNALS.OPTIONS.promptOnMissingPlayServices && this.playServicesAvailability.isUserResolvableError) {\n          this.promptForPlayServices();\n        } else {\n          var error = INTERNALS.STRINGS.ERROR_PLAY_SERVICES(status);\n          if (INTERNALS.OPTIONS.errorOnMissingPlayServices) {\n            if (status === 2) console.warn(error);else throw new Error(error);\n          } else {\n            console.warn(error);\n          }\n        }\n      }\n    }\n  }, {\n    key: \"getPlayServicesStatus\",\n    value: function getPlayServicesStatus() {\n      if (isIOS) return Promise.resolve(null);\n      return FirebaseCoreModule.getPlayServicesStatus();\n    }\n  }, {\n    key: \"promptForPlayServices\",\n    value: function promptForPlayServices() {\n      if (isIOS) return null;\n      return FirebaseCoreModule.promptForPlayServices();\n    }\n  }, {\n    key: \"resolutionForPlayServices\",\n    value: function resolutionForPlayServices() {\n      if (isIOS) return null;\n      return FirebaseCoreModule.resolutionForPlayServices();\n    }\n  }, {\n    key: \"makePlayServicesAvailable\",\n    value: function makePlayServicesAvailable() {\n      if (isIOS) return null;\n      return FirebaseCoreModule.makePlayServicesAvailable();\n    }\n  }, {\n    key: \"logLevel\",\n    set: function set(logLevel) {\n      INTERNALS.OPTIONS.logLevel = logLevel;\n    }\n  }, {\n    key: \"playServicesAvailability\",\n    get: function get() {\n      return FirebaseCoreModule.playServicesAvailability || {\n        isAvailable: true,\n        status: 0\n      };\n    }\n  }, {\n    key: \"errorOnMissingPlayServices\",\n    set: function set(bool) {\n      INTERNALS.OPTIONS.errorOnMissingPlayServices = bool;\n    }\n  }, {\n    key: \"promptOnMissingPlayServices\",\n    set: function set(bool) {\n      INTERNALS.OPTIONS.promptOnMissingPlayServices = bool;\n    }\n  }]);\n}(ModuleBase);\nexport { RNFirebaseUtils as default };\nexport var statics = {};","map":{"version":3,"names":["INTERNALS","isIOS","ModuleBase","DatabaseUtils","FirebaseCoreModule","NativeModules","RNFirebase","MODULE_NAME","NAMESPACE","RNFirebaseUtils","_ModuleBase","app","_classCallCheck","_callSuper","moduleName","hasMultiAppSupport","hasCustomUrlSupport","namespace","_inherits","_createClass","key","get","value","checkPlayServicesAvailability","status","playServicesAvailability","isAvailable","OPTIONS","promptOnMissingPlayServices","isUserResolvableError","promptForPlayServices","error","STRINGS","ERROR_PLAY_SERVICES","errorOnMissingPlayServices","console","warn","Error","getPlayServicesStatus","Promise","resolve","resolutionForPlayServices","makePlayServicesAvailable","set","logLevel","bool","default","statics"],"sources":["C:/Users/Johnny Hermitano/Documents/GitHub/sofdes_watermelon/project/node_modules/react-native-firebase/dist/modules/utils/index.js"],"sourcesContent":["import { NativeModules } from 'react-native';\nimport INTERNALS from '../../utils/internals';\nimport { isIOS } from '../../utils';\nimport ModuleBase from '../../utils/ModuleBase';\nimport DatabaseUtils from './database';\nconst FirebaseCoreModule = NativeModules.RNFirebase;\nexport const MODULE_NAME = 'RNFirebaseUtils';\nexport const NAMESPACE = 'utils';\nexport default class RNFirebaseUtils extends ModuleBase {\n  constructor(app) {\n    super(app, {\n      moduleName: MODULE_NAME,\n      hasMultiAppSupport: false,\n      hasCustomUrlSupport: false,\n      namespace: NAMESPACE\n    });\n  }\n\n  get database() {\n    return DatabaseUtils;\n  }\n  /**\n   *\n   */\n\n\n  checkPlayServicesAvailability() {\n    if (isIOS) return;\n    const {\n      status\n    } = this.playServicesAvailability;\n\n    if (!this.playServicesAvailability.isAvailable) {\n      if (INTERNALS.OPTIONS.promptOnMissingPlayServices && this.playServicesAvailability.isUserResolvableError) {\n        this.promptForPlayServices();\n      } else {\n        const error = INTERNALS.STRINGS.ERROR_PLAY_SERVICES(status);\n\n        if (INTERNALS.OPTIONS.errorOnMissingPlayServices) {\n          if (status === 2) console.warn(error); // only warn if it exists but may need an update\n          else throw new Error(error);\n        } else {\n          console.warn(error);\n        }\n      }\n    }\n  }\n\n  getPlayServicesStatus() {\n    if (isIOS) return Promise.resolve(null);\n    return FirebaseCoreModule.getPlayServicesStatus();\n  }\n\n  promptForPlayServices() {\n    if (isIOS) return null;\n    return FirebaseCoreModule.promptForPlayServices();\n  }\n\n  resolutionForPlayServices() {\n    if (isIOS) return null;\n    return FirebaseCoreModule.resolutionForPlayServices();\n  }\n\n  makePlayServicesAvailable() {\n    if (isIOS) return null;\n    return FirebaseCoreModule.makePlayServicesAvailable();\n  }\n  /**\n   * Set the global logging level for all logs.\n   *\n   * @param logLevel\n   */\n\n\n  set logLevel(logLevel) {\n    INTERNALS.OPTIONS.logLevel = logLevel;\n  }\n  /**\n   * Returns props from the android GoogleApiAvailability sdk\n   * @android\n   * @return {RNFirebase.GoogleApiAvailabilityType|{isAvailable: boolean, status: number}}\n   */\n\n\n  get playServicesAvailability() {\n    return FirebaseCoreModule.playServicesAvailability || {\n      isAvailable: true,\n      status: 0\n    };\n  }\n  /**\n   * Enable/Disable throwing an error or warning on detecting a play services problem\n   * @android\n   * @param bool\n   */\n\n\n  set errorOnMissingPlayServices(bool) {\n    INTERNALS.OPTIONS.errorOnMissingPlayServices = bool;\n  }\n  /**\n   * Enable/Disable automatic prompting of the play services update dialog\n   * @android\n   * @param bool\n   */\n\n\n  set promptOnMissingPlayServices(bool) {\n    INTERNALS.OPTIONS.promptOnMissingPlayServices = bool;\n  }\n\n}\nexport const statics = {};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}