{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport { initialiseLogger, getLogger } from \"./log\";\nimport { initialiseNativeModule } from \"./native\";\nvar ModuleBase = function () {\n  function ModuleBase(app, config, customUrlOrRegion) {\n    _classCallCheck(this, ModuleBase);\n    if (!config.moduleName) {\n      throw new Error('Missing module name');\n    }\n    if (!config.namespace) {\n      throw new Error('Missing namespace');\n    }\n    var moduleName = config.moduleName;\n    this._app = app;\n    this._customUrlOrRegion = customUrlOrRegion;\n    this.namespace = config.namespace;\n    initialiseNativeModule(this, config, customUrlOrRegion);\n    initialiseLogger(this, `${app.name}:${moduleName.replace('RNFirebase', '')}`);\n  }\n  return _createClass(ModuleBase, [{\n    key: \"app\",\n    get: function get() {\n      return this._app;\n    }\n  }, {\n    key: \"log\",\n    get: function get() {\n      return getLogger(this);\n    }\n  }]);\n}();\nexport { ModuleBase as default };","map":{"version":3,"names":["initialiseLogger","getLogger","initialiseNativeModule","ModuleBase","app","config","customUrlOrRegion","_classCallCheck","moduleName","Error","namespace","_app","_customUrlOrRegion","name","replace","_createClass","key","get","default"],"sources":["C:/Users/Johnny Hermitano/Documents/GitHub/sofdes_watermelon/project/node_modules/react-native-firebase/dist/utils/ModuleBase.js"],"sourcesContent":["import { initialiseLogger, getLogger } from './log';\nimport { initialiseNativeModule } from './native';\nexport default class ModuleBase {\n  /**\n   *\n   * @param app\n   * @param config\n   * @param customUrlOrRegion\n   */\n  constructor(app, config, customUrlOrRegion) {\n    if (!config.moduleName) {\n      throw new Error('Missing module name');\n    }\n\n    if (!config.namespace) {\n      throw new Error('Missing namespace');\n    }\n\n    const {\n      moduleName\n    } = config;\n    this._app = app;\n    this._customUrlOrRegion = customUrlOrRegion;\n    this.namespace = config.namespace; // check if native module exists as all native\n\n    initialiseNativeModule(this, config, customUrlOrRegion);\n    initialiseLogger(this, `${app.name}:${moduleName.replace('RNFirebase', '')}`);\n  }\n  /**\n   * Returns the App instance for current module\n   * @return {*}\n   */\n\n\n  get app() {\n    return this._app;\n  }\n\n  get log() {\n    return getLogger(this);\n  }\n\n}"],"mappings":";;AAAA,SAASA,gBAAgB,EAAEC,SAAS;AACpC,SAASC,sBAAsB;AAAmB,IAC7BC,UAAU;EAO7B,SAAAA,WAAYC,GAAG,EAAEC,MAAM,EAAEC,iBAAiB,EAAE;IAAAC,eAAA,OAAAJ,UAAA;IAC1C,IAAI,CAACE,MAAM,CAACG,UAAU,EAAE;MACtB,MAAM,IAAIC,KAAK,CAAC,qBAAqB,CAAC;IACxC;IAEA,IAAI,CAACJ,MAAM,CAACK,SAAS,EAAE;MACrB,MAAM,IAAID,KAAK,CAAC,mBAAmB,CAAC;IACtC;IAEA,IACED,UAAU,GACRH,MAAM,CADRG,UAAU;IAEZ,IAAI,CAACG,IAAI,GAAGP,GAAG;IACf,IAAI,CAACQ,kBAAkB,GAAGN,iBAAiB;IAC3C,IAAI,CAACI,SAAS,GAAGL,MAAM,CAACK,SAAS;IAEjCR,sBAAsB,CAAC,IAAI,EAAEG,MAAM,EAAEC,iBAAiB,CAAC;IACvDN,gBAAgB,CAAC,IAAI,EAAG,GAAEI,GAAG,CAACS,IAAK,IAAGL,UAAU,CAACM,OAAO,CAAC,YAAY,EAAE,EAAE,CAAE,EAAC,CAAC;EAC/E;EAAC,OAAAC,YAAA,CAAAZ,UAAA;IAAAa,GAAA;IAAAC,GAAA,EAOD,SAAAA,IAAA,EAAU;MACR,OAAO,IAAI,CAACN,IAAI;IAClB;EAAC;IAAAK,GAAA;IAAAC,GAAA,EAED,SAAAA,IAAA,EAAU;MACR,OAAOhB,SAAS,CAAC,IAAI,CAAC;IACxB;EAAC;AAAA;AAAA,SAtCkBE,UAAU,IAAAe,OAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}