{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport { parseUpdateArgs } from \"./utils\";\nimport { buildNativeMap } from \"./utils/serialize\";\nimport DocumentSnapshot from \"./DocumentSnapshot\";\nimport { getNativeModule } from \"../../utils/native\";\nvar Transaction = function () {\n  function Transaction(firestore, meta) {\n    _classCallCheck(this, Transaction);\n    this._meta = meta;\n    this._commandBuffer = [];\n    this._firestore = firestore;\n    this._pendingResult = undefined;\n  }\n  return _createClass(Transaction, [{\n    key: \"_prepare\",\n    value: function _prepare() {\n      this._commandBuffer = [];\n      this._pendingResult = undefined;\n    }\n  }, {\n    key: \"get\",\n    value: function get(documentRef) {\n      var _this = this;\n      return getNativeModule(this._firestore).transactionGetDocument(this._meta.id, documentRef.path).then(function (result) {\n        return new DocumentSnapshot(_this._firestore, result);\n      });\n    }\n  }, {\n    key: \"set\",\n    value: function set(documentRef, data, options) {\n      this._commandBuffer.push({\n        type: 'set',\n        path: documentRef.path,\n        data: buildNativeMap(data),\n        options: options || {}\n      });\n      return this;\n    }\n  }, {\n    key: \"update\",\n    value: function update(documentRef) {\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n      var data = parseUpdateArgs(args, 'Transaction.update');\n      this._commandBuffer.push({\n        type: 'update',\n        path: documentRef.path,\n        data: buildNativeMap(data)\n      });\n      return this;\n    }\n  }, {\n    key: \"delete\",\n    value: function _delete(documentRef) {\n      this._commandBuffer.push({\n        type: 'delete',\n        path: documentRef.path\n      });\n      return this;\n    }\n  }]);\n}();\nexport { Transaction as default };","map":{"version":3,"names":["parseUpdateArgs","buildNativeMap","DocumentSnapshot","getNativeModule","Transaction","firestore","meta","_classCallCheck","_meta","_commandBuffer","_firestore","_pendingResult","undefined","_createClass","key","value","_prepare","get","documentRef","_this","transactionGetDocument","id","path","then","result","set","data","options","push","type","update","_len","arguments","length","args","Array","_key","_delete","default"],"sources":["C:/Users/Johnny Hermitano/Documents/GitHub/sofdes_watermelon/project/node_modules/react-native-firebase/dist/modules/firestore/Transaction.js"],"sourcesContent":["/**\n * \n * Firestore Transaction representation wrapper\n */\nimport { parseUpdateArgs } from './utils';\nimport { buildNativeMap } from './utils/serialize';\nimport DocumentSnapshot from './DocumentSnapshot';\nimport { getNativeModule } from '../../utils/native';\n// TODO docs state all get requests must be made FIRST before any modifications\n// TODO so need to validate that\n\n/**\n * @class Transaction\n */\nexport default class Transaction {\n  constructor(firestore, meta) {\n    this._meta = meta;\n    this._commandBuffer = [];\n    this._firestore = firestore;\n    this._pendingResult = undefined;\n  }\n  /**\n   * -------------\n   * INTERNAL API\n   * -------------\n   */\n\n  /**\n   * Clears the command buffer and any pending result in prep for\n   * the next transaction iteration attempt.\n   *\n   * @private\n   */\n\n\n  _prepare() {\n    this._commandBuffer = [];\n    this._pendingResult = undefined;\n  }\n  /**\n   * -------------\n   *  PUBLIC API\n   * -------------\n   */\n\n  /**\n   * Reads the document referenced by the provided DocumentReference.\n   *\n   * @param documentRef DocumentReference A reference to the document to be retrieved. Value must not be null.\n   *\n   * @returns Promise<DocumentSnapshot>\n   */\n\n\n  get(documentRef) {\n    // todo validate doc ref\n    return getNativeModule(this._firestore).transactionGetDocument(this._meta.id, documentRef.path).then(result => new DocumentSnapshot(this._firestore, result));\n  }\n  /**\n   * Writes to the document referred to by the provided DocumentReference.\n   * If the document does not exist yet, it will be created. If you pass options,\n   * the provided data can be merged into the existing document.\n   *\n   * @param documentRef DocumentReference A reference to the document to be created. Value must not be null.\n   * @param data Object An object of the fields and values for the document.\n   * @param options SetOptions An object to configure the set behavior.\n   *        Pass {merge: true} to only replace the values specified in the data argument.\n   *        Fields omitted will remain untouched.\n   *\n   * @returns {Transaction}\n   */\n\n\n  set(documentRef, data, options) {\n    // todo validate doc ref\n    // todo validate data is object\n    this._commandBuffer.push({\n      type: 'set',\n      path: documentRef.path,\n      data: buildNativeMap(data),\n      options: options || {}\n    });\n\n    return this;\n  }\n  /**\n   * Updates fields in the document referred to by this DocumentReference.\n   * The update will fail if applied to a document that does not exist. Nested\n   * fields can be updated by providing dot-separated field path strings or by providing FieldPath objects.\n   *\n   * @param documentRef DocumentReference A reference to the document to be updated. Value must not be null.\n   * @param args any Either an object containing all of the fields and values to update,\n   *        or a series of arguments alternating between fields (as string or FieldPath\n   *        objects) and values.\n   *\n   * @returns {Transaction}\n   */\n\n\n  update(documentRef, ...args) {\n    // todo validate doc ref\n    const data = parseUpdateArgs(args, 'Transaction.update');\n\n    this._commandBuffer.push({\n      type: 'update',\n      path: documentRef.path,\n      data: buildNativeMap(data)\n    });\n\n    return this;\n  }\n  /**\n   * Deletes the document referred to by the provided DocumentReference.\n   *\n   * @param documentRef DocumentReference A reference to the document to be deleted. Value must not be null.\n   *\n   * @returns {Transaction}\n   */\n\n\n  delete(documentRef) {\n    // todo validate doc ref\n    this._commandBuffer.push({\n      type: 'delete',\n      path: documentRef.path\n    });\n\n    return this;\n  }\n\n}"],"mappings":";;AAIA,SAASA,eAAe;AACxB,SAASC,cAAc;AACvB,OAAOC,gBAAgB;AACvB,SAASC,eAAe;AAA6B,IAOhCC,WAAW;EAC9B,SAAAA,YAAYC,SAAS,EAAEC,IAAI,EAAE;IAAAC,eAAA,OAAAH,WAAA;IAC3B,IAAI,CAACI,KAAK,GAAGF,IAAI;IACjB,IAAI,CAACG,cAAc,GAAG,EAAE;IACxB,IAAI,CAACC,UAAU,GAAGL,SAAS;IAC3B,IAAI,CAACM,cAAc,GAAGC,SAAS;EACjC;EAAC,OAAAC,YAAA,CAAAT,WAAA;IAAAU,GAAA;IAAAC,KAAA,EAeD,SAAAC,SAAA,EAAW;MACT,IAAI,CAACP,cAAc,GAAG,EAAE;MACxB,IAAI,CAACE,cAAc,GAAGC,SAAS;IACjC;EAAC;IAAAE,GAAA;IAAAC,KAAA,EAgBD,SAAAE,IAAIC,WAAW,EAAE;MAAA,IAAAC,KAAA;MAEf,OAAOhB,eAAe,CAAC,IAAI,CAACO,UAAU,CAAC,CAACU,sBAAsB,CAAC,IAAI,CAACZ,KAAK,CAACa,EAAE,EAAEH,WAAW,CAACI,IAAI,CAAC,CAACC,IAAI,CAAC,UAAAC,MAAM;QAAA,OAAI,IAAItB,gBAAgB,CAACiB,KAAI,CAACT,UAAU,EAAEc,MAAM,CAAC;MAAA,EAAC;IAC/J;EAAC;IAAAV,GAAA;IAAAC,KAAA,EAgBD,SAAAU,IAAIP,WAAW,EAAEQ,IAAI,EAAEC,OAAO,EAAE;MAG9B,IAAI,CAAClB,cAAc,CAACmB,IAAI,CAAC;QACvBC,IAAI,EAAE,KAAK;QACXP,IAAI,EAAEJ,WAAW,CAACI,IAAI;QACtBI,IAAI,EAAEzB,cAAc,CAACyB,IAAI,CAAC;QAC1BC,OAAO,EAAEA,OAAO,IAAI,CAAC;MACvB,CAAC,CAAC;MAEF,OAAO,IAAI;IACb;EAAC;IAAAb,GAAA;IAAAC,KAAA,EAeD,SAAAe,OAAOZ,WAAW,EAAW;MAAA,SAAAa,IAAA,GAAAC,SAAA,CAAAC,MAAA,EAANC,IAAI,OAAAC,KAAA,CAAAJ,IAAA,OAAAA,IAAA,WAAAK,IAAA,MAAAA,IAAA,GAAAL,IAAA,EAAAK,IAAA;QAAJF,IAAI,CAAAE,IAAA,QAAAJ,SAAA,CAAAI,IAAA;MAAA;MAEzB,IAAMV,IAAI,GAAG1B,eAAe,CAACkC,IAAI,EAAE,oBAAoB,CAAC;MAExD,IAAI,CAACzB,cAAc,CAACmB,IAAI,CAAC;QACvBC,IAAI,EAAE,QAAQ;QACdP,IAAI,EAAEJ,WAAW,CAACI,IAAI;QACtBI,IAAI,EAAEzB,cAAc,CAACyB,IAAI;MAC3B,CAAC,CAAC;MAEF,OAAO,IAAI;IACb;EAAC;IAAAZ,GAAA;IAAAC,KAAA,EAUD,SAAAsB,QAAOnB,WAAW,EAAE;MAElB,IAAI,CAACT,cAAc,CAACmB,IAAI,CAAC;QACvBC,IAAI,EAAE,QAAQ;QACdP,IAAI,EAAEJ,WAAW,CAACI;MACpB,CAAC,CAAC;MAEF,OAAO,IAAI;IACb;EAAC;AAAA;AAAA,SAlHkBlB,WAAW,IAAAkC,OAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}