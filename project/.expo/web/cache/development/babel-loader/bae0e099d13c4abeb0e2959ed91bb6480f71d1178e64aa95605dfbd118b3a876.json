{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nfunction _callSuper(_this, derived, args) {\n  function isNativeReflectConstruct() {\n    if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n    if (Reflect.construct.sham) return false;\n    if (typeof Proxy === \"function\") return true;\n    try {\n      return !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    } catch (e) {\n      return false;\n    }\n  }\n  derived = _getPrototypeOf(derived);\n  return _possibleConstructorReturn(_this, isNativeReflectConstruct() ? Reflect.construct(derived, args || [], _getPrototypeOf(_this).constructor) : derived.apply(_this, args));\n}\nimport { getLogger } from \"../../utils/log\";\nimport ModuleBase from \"../../utils/ModuleBase\";\nimport { getNativeModule } from \"../../utils/native\";\nexport var MODULE_NAME = 'RNFirebaseRemoteConfig';\nexport var NAMESPACE = 'config';\nvar RemoteConfig = function (_ModuleBase) {\n  function RemoteConfig(app) {\n    var _this2;\n    _classCallCheck(this, RemoteConfig);\n    _this2 = _callSuper(this, RemoteConfig, [app, {\n      moduleName: MODULE_NAME,\n      hasMultiAppSupport: false,\n      hasCustomUrlSupport: false,\n      namespace: NAMESPACE\n    }]);\n    _this2._developerModeEnabled = false;\n    return _this2;\n  }\n  _inherits(RemoteConfig, _ModuleBase);\n  return _createClass(RemoteConfig, [{\n    key: \"_nativeValueToJS\",\n    value: function _nativeValueToJS(nativeValue) {\n      return {\n        source: nativeValue.source,\n        val: function val() {\n          if (nativeValue.boolValue !== null && (nativeValue.stringValue === 'true' || nativeValue.stringValue === 'false' || nativeValue.stringValue === null)) return nativeValue.boolValue;\n          if (nativeValue.numberValue !== null && nativeValue.numberValue !== undefined && (nativeValue.stringValue == null || nativeValue.stringValue === '' || nativeValue.numberValue.toString() === nativeValue.stringValue)) return nativeValue.numberValue;\n          if (nativeValue.dataValue !== nativeValue.stringValue && (nativeValue.stringValue == null || nativeValue.stringValue === '')) return nativeValue.dataValue;\n          return nativeValue.stringValue;\n        }\n      };\n    }\n  }, {\n    key: \"enableDeveloperMode\",\n    value: function enableDeveloperMode() {\n      if (!this._developerModeEnabled) {\n        getLogger(this).debug('Enabled developer mode');\n        getNativeModule(this).enableDeveloperMode();\n        this._developerModeEnabled = true;\n      }\n    }\n  }, {\n    key: \"fetch\",\n    value: function fetch(expiration) {\n      if (expiration !== undefined) {\n        getLogger(this).debug(`Fetching remote config data with expiration ${expiration.toString()}`);\n        return getNativeModule(this).fetchWithExpirationDuration(expiration);\n      }\n      getLogger(this).debug('Fetching remote config data');\n      return getNativeModule(this).fetch();\n    }\n  }, {\n    key: \"activateFetched\",\n    value: function activateFetched() {\n      getLogger(this).debug('Activating remote config');\n      return getNativeModule(this).activateFetched();\n    }\n  }, {\n    key: \"getValue\",\n    value: function getValue(key) {\n      return getNativeModule(this).getValue(key || '').then(this._nativeValueToJS);\n    }\n  }, {\n    key: \"getValues\",\n    value: function getValues(keys) {\n      var _this3 = this;\n      return getNativeModule(this).getValues(keys || []).then(function (nativeValues) {\n        var values = {};\n        for (var i = 0, len = keys.length; i < len; i++) {\n          values[keys[i]] = _this3._nativeValueToJS(nativeValues[i]);\n        }\n        return values;\n      });\n    }\n  }, {\n    key: \"getKeysByPrefix\",\n    value: function getKeysByPrefix(prefix) {\n      return getNativeModule(this).getKeysByPrefix(prefix);\n    }\n  }, {\n    key: \"setDefaults\",\n    value: function setDefaults(defaults) {\n      getNativeModule(this).setDefaults(defaults);\n    }\n  }, {\n    key: \"setDefaultsFromResource\",\n    value: function setDefaultsFromResource(resource) {\n      getNativeModule(this).setDefaultsFromResource(resource);\n    }\n  }]);\n}(ModuleBase);\nexport { RemoteConfig as default };\nexport var statics = {};","map":{"version":3,"names":["getLogger","ModuleBase","getNativeModule","MODULE_NAME","NAMESPACE","RemoteConfig","_ModuleBase","app","_this2","_classCallCheck","_callSuper","moduleName","hasMultiAppSupport","hasCustomUrlSupport","namespace","_developerModeEnabled","_inherits","_createClass","key","value","_nativeValueToJS","nativeValue","source","val","boolValue","stringValue","numberValue","undefined","toString","dataValue","enableDeveloperMode","debug","fetch","expiration","fetchWithExpirationDuration","activateFetched","getValue","then","getValues","keys","_this3","nativeValues","values","i","len","length","getKeysByPrefix","prefix","setDefaults","defaults","setDefaultsFromResource","resource","default","statics"],"sources":["C:/Users/Johnny Hermitano/Documents/GitHub/sofdes_watermelon/project/node_modules/react-native-firebase/dist/modules/config/index.js"],"sourcesContent":["/**\n * \n * Remote Config representation wrapper\n */\nimport { getLogger } from '../../utils/log';\nimport ModuleBase from '../../utils/ModuleBase';\nimport { getNativeModule } from '../../utils/native';\nexport const MODULE_NAME = 'RNFirebaseRemoteConfig';\nexport const NAMESPACE = 'config';\n\n/**\n * @class Config\n */\nexport default class RemoteConfig extends ModuleBase {\n  constructor(app) {\n    super(app, {\n      moduleName: MODULE_NAME,\n      hasMultiAppSupport: false,\n      hasCustomUrlSupport: false,\n      namespace: NAMESPACE\n    });\n    this._developerModeEnabled = false;\n  }\n  /**\n   * Converts a native map to single JS value\n   * @param nativeValue\n   * @returns {*}\n   * @private\n   */\n\n\n  _nativeValueToJS(nativeValue) {\n    return {\n      source: nativeValue.source,\n\n      val() {\n        if (nativeValue.boolValue !== null && (nativeValue.stringValue === 'true' || nativeValue.stringValue === 'false' || nativeValue.stringValue === null)) return nativeValue.boolValue;\n        if (nativeValue.numberValue !== null && nativeValue.numberValue !== undefined && (nativeValue.stringValue == null || nativeValue.stringValue === '' || nativeValue.numberValue.toString() === nativeValue.stringValue)) return nativeValue.numberValue;\n        if (nativeValue.dataValue !== nativeValue.stringValue && (nativeValue.stringValue == null || nativeValue.stringValue === '')) return nativeValue.dataValue;\n        return nativeValue.stringValue;\n      }\n\n    };\n  }\n  /**\n   * Enable Remote Config developer mode to allow for frequent refreshes of the cache\n   */\n\n\n  enableDeveloperMode() {\n    if (!this._developerModeEnabled) {\n      getLogger(this).debug('Enabled developer mode');\n      getNativeModule(this).enableDeveloperMode();\n      this._developerModeEnabled = true;\n    }\n  }\n  /**\n   * Fetches Remote Config data\n   * Call activateFetched to make fetched data available in app\n   * @returns {*|Promise.<String>}:\n   */\n\n\n  fetch(expiration) {\n    if (expiration !== undefined) {\n      getLogger(this).debug(`Fetching remote config data with expiration ${expiration.toString()}`);\n      return getNativeModule(this).fetchWithExpirationDuration(expiration);\n    }\n\n    getLogger(this).debug('Fetching remote config data');\n    return getNativeModule(this).fetch();\n  }\n  /**\n   * Applies Fetched Config data to the Active Config\n   * @returns {*|Promise.<Bool>}\n   * resolves if there was a Fetched Config, and it was activated,\n   * rejects if no Fetched Config was found, or the Fetched Config was already activated.\n   */\n\n\n  activateFetched() {\n    getLogger(this).debug('Activating remote config');\n    return getNativeModule(this).activateFetched();\n  }\n  /**\n   * Gets the config value of the default namespace.\n   * @param key: Config key\n   * @returns {*|Promise.<Object>}, will always resolve\n   * Object looks like\n   *  {\n   *    \"stringValue\" : stringValue,\n   *    \"numberValue\" : numberValue,\n   *    \"dataValue\" : dataValue,\n   *    \"boolValue\" : boolValue,\n   *    \"source\" : OneOf<String>(remoteConfigSourceRemote|remoteConfigSourceDefault|remoteConfigSourceStatic)\n   *  }\n   */\n\n\n  getValue(key) {\n    return getNativeModule(this).getValue(key || '').then(this._nativeValueToJS);\n  }\n  /**\n   * Gets the config value of the default namespace.\n   * @param keys: Config key\n   * @returns {*|Promise.<Object>}, will always resolve.\n   * Result will be a dictionary of key and config objects\n   * Object looks like\n   *  {\n   *    \"stringValue\" : stringValue,\n   *    \"numberValue\" : numberValue,\n   *    \"dataValue\" : dataValue,\n   *    \"boolValue\" : boolValue,\n   *    \"source\" : OneOf<String>(remoteConfigSourceRemote|remoteConfigSourceDefault|remoteConfigSourceStatic)\n   *  }\n   */\n\n\n  getValues(keys) {\n    return getNativeModule(this).getValues(keys || []).then(nativeValues => {\n      const values = {};\n\n      for (let i = 0, len = keys.length; i < len; i++) {\n        values[keys[i]] = this._nativeValueToJS(nativeValues[i]);\n      }\n\n      return values;\n    });\n  }\n  /**\n   * Get the set of parameter keys that start with the given prefix, from the default namespace\n   * @param prefix: The key prefix to look for. If prefix is nil or empty, returns all the keys.\n   * @returns {*|Promise.<Array<String>>}\n   */\n\n\n  getKeysByPrefix(prefix) {\n    return getNativeModule(this).getKeysByPrefix(prefix);\n  }\n  /**\n   * Sets config defaults for parameter keys and values in the default namespace config.\n   * @param defaults: A dictionary mapping a String key to a Object values.\n   */\n\n\n  setDefaults(defaults) {\n    getNativeModule(this).setDefaults(defaults);\n  }\n  /**\n   * Sets default configs from plist for default namespace;\n   * @param resource: The plist file name or resource ID\n   */\n\n\n  setDefaultsFromResource(resource) {\n    getNativeModule(this).setDefaultsFromResource(resource);\n  }\n\n}\nexport const statics = {};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}