{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nfunction _callSuper(_this, derived, args) {\n  function isNativeReflectConstruct() {\n    if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n    if (Reflect.construct.sham) return false;\n    if (typeof Proxy === \"function\") return true;\n    try {\n      return !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    } catch (e) {\n      return false;\n    }\n  }\n  derived = _getPrototypeOf(derived);\n  return _possibleConstructorReturn(_this, isNativeReflectConstruct() ? Reflect.construct(derived, args || [], _getPrototypeOf(_this).constructor) : derived.apply(_this, args));\n}\nimport Trace from \"./Trace\";\nimport HttpMetric from \"./HttpMetric\";\nimport ModuleBase from \"../../utils/ModuleBase\";\nimport { getNativeModule } from \"../../utils/native\";\nexport var MODULE_NAME = 'RNFirebasePerformance';\nexport var NAMESPACE = 'perf';\nvar HTTP_METHODS = {\n  CONNECT: true,\n  DELETE: true,\n  GET: true,\n  HEAD: true,\n  OPTIONS: true,\n  PATCH: true,\n  POST: true,\n  PUT: true,\n  TRACE: true\n};\nvar PerformanceMonitoring = function (_ModuleBase) {\n  function PerformanceMonitoring(app) {\n    _classCallCheck(this, PerformanceMonitoring);\n    return _callSuper(this, PerformanceMonitoring, [app, {\n      moduleName: MODULE_NAME,\n      hasMultiAppSupport: false,\n      hasCustomUrlSupport: false,\n      namespace: NAMESPACE\n    }]);\n  }\n  _inherits(PerformanceMonitoring, _ModuleBase);\n  return _createClass(PerformanceMonitoring, [{\n    key: \"setPerformanceCollectionEnabled\",\n    value: function setPerformanceCollectionEnabled(enabled) {\n      if (typeof enabled !== 'boolean') {\n        throw new Error('firebase.perf().setPerformanceCollectionEnabled() requires a boolean value');\n      }\n      return getNativeModule(this).setPerformanceCollectionEnabled(enabled);\n    }\n  }, {\n    key: \"newTrace\",\n    value: function newTrace(trace) {\n      if (typeof trace !== 'string') {\n        throw new Error('firebase.perf().newTrace() requires a string value');\n      }\n      return new Trace(this, trace);\n    }\n  }, {\n    key: \"newHttpMetric\",\n    value: function newHttpMetric(url, httpMethod) {\n      if (typeof url !== 'string' || typeof httpMethod !== 'string') {\n        throw new Error('firebase.perf().newHttpMetric() requires url and httpMethod string values');\n      }\n      if (!HTTP_METHODS[httpMethod]) {\n        throw new Error(`firebase.perf().newHttpMetric() httpMethod should be one of ${Object.keys(HTTP_METHODS).join(', ')}`);\n      }\n      return new HttpMetric(this, url, httpMethod);\n    }\n  }]);\n}(ModuleBase);\nexport { PerformanceMonitoring as default };\nexport var statics = {};","map":{"version":3,"names":["Trace","HttpMetric","ModuleBase","getNativeModule","MODULE_NAME","NAMESPACE","HTTP_METHODS","CONNECT","DELETE","GET","HEAD","OPTIONS","PATCH","POST","PUT","TRACE","PerformanceMonitoring","_ModuleBase","app","_classCallCheck","_callSuper","moduleName","hasMultiAppSupport","hasCustomUrlSupport","namespace","_inherits","_createClass","key","value","setPerformanceCollectionEnabled","enabled","Error","newTrace","trace","newHttpMetric","url","httpMethod","Object","keys","join","default","statics"],"sources":["C:/Users/Johnny Hermitano/Documents/GitHub/sofdes_watermelon/project/node_modules/react-native-firebase/dist/modules/perf/index.js"],"sourcesContent":["/**\n * \n * Performance monitoring representation wrapper\n */\nimport Trace from './Trace';\nimport HttpMetric from './HttpMetric';\nimport ModuleBase from '../../utils/ModuleBase';\nimport { getNativeModule } from '../../utils/native';\nexport const MODULE_NAME = 'RNFirebasePerformance';\nexport const NAMESPACE = 'perf';\nconst HTTP_METHODS = {\n  CONNECT: true,\n  DELETE: true,\n  GET: true,\n  HEAD: true,\n  OPTIONS: true,\n  PATCH: true,\n  POST: true,\n  PUT: true,\n  TRACE: true\n};\nexport default class PerformanceMonitoring extends ModuleBase {\n  constructor(app) {\n    super(app, {\n      moduleName: MODULE_NAME,\n      hasMultiAppSupport: false,\n      hasCustomUrlSupport: false,\n      namespace: NAMESPACE\n    });\n  }\n  /**\n   * Globally enable or disable performance monitoring\n   * @param enabled\n   * @returns {*}\n   */\n\n\n  setPerformanceCollectionEnabled(enabled) {\n    if (typeof enabled !== 'boolean') {\n      throw new Error('firebase.perf().setPerformanceCollectionEnabled() requires a boolean value');\n    }\n\n    return getNativeModule(this).setPerformanceCollectionEnabled(enabled);\n  }\n  /**\n   * Returns a new trace instance\n   * @param trace\n   */\n\n\n  newTrace(trace) {\n    if (typeof trace !== 'string') {\n      throw new Error('firebase.perf().newTrace() requires a string value');\n    }\n\n    return new Trace(this, trace);\n  }\n  /**\n   * Return a new HttpMetric instance\n   * @param url\n   * @param httpMethod\n   * @returns {HttpMetric}\n   */\n\n\n  newHttpMetric(url, httpMethod) {\n    if (typeof url !== 'string' || typeof httpMethod !== 'string') {\n      throw new Error('firebase.perf().newHttpMetric() requires url and httpMethod string values');\n    }\n\n    if (!HTTP_METHODS[httpMethod]) {\n      throw new Error(`firebase.perf().newHttpMetric() httpMethod should be one of ${Object.keys(HTTP_METHODS).join(', ')}`);\n    }\n\n    return new HttpMetric(this, url, httpMethod);\n  }\n\n}\nexport const statics = {};"],"mappings":";;;;;;;;;;;;;;;;;;;AAIA,OAAOA,KAAK;AACZ,OAAOC,UAAU;AACjB,OAAOC,UAAU;AACjB,SAASC,eAAe;AACxB,OAAO,IAAMC,WAAW,GAAG,uBAAuB;AAClD,OAAO,IAAMC,SAAS,GAAG,MAAM;AAC/B,IAAMC,YAAY,GAAG;EACnBC,OAAO,EAAE,IAAI;EACbC,MAAM,EAAE,IAAI;EACZC,GAAG,EAAE,IAAI;EACTC,IAAI,EAAE,IAAI;EACVC,OAAO,EAAE,IAAI;EACbC,KAAK,EAAE,IAAI;EACXC,IAAI,EAAE,IAAI;EACVC,GAAG,EAAE,IAAI;EACTC,KAAK,EAAE;AACT,CAAC;AAAC,IACmBC,qBAAqB,aAAAC,WAAA;EACxC,SAAAD,sBAAYE,GAAG,EAAE;IAAAC,eAAA,OAAAH,qBAAA;IAAA,OAAAI,UAAA,OAAAJ,qBAAA,GACTE,GAAG,EAAE;MACTG,UAAU,EAAEjB,WAAW;MACvBkB,kBAAkB,EAAE,KAAK;MACzBC,mBAAmB,EAAE,KAAK;MAC1BC,SAAS,EAAEnB;IACb,CAAC;EACH;EAACoB,SAAA,CAAAT,qBAAA,EAAAC,WAAA;EAAA,OAAAS,YAAA,CAAAV,qBAAA;IAAAW,GAAA;IAAAC,KAAA,EAQD,SAAAC,gCAAgCC,OAAO,EAAE;MACvC,IAAI,OAAOA,OAAO,KAAK,SAAS,EAAE;QAChC,MAAM,IAAIC,KAAK,CAAC,4EAA4E,CAAC;MAC/F;MAEA,OAAO5B,eAAe,CAAC,IAAI,CAAC,CAAC0B,+BAA+B,CAACC,OAAO,CAAC;IACvE;EAAC;IAAAH,GAAA;IAAAC,KAAA,EAOD,SAAAI,SAASC,KAAK,EAAE;MACd,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;QAC7B,MAAM,IAAIF,KAAK,CAAC,oDAAoD,CAAC;MACvE;MAEA,OAAO,IAAI/B,KAAK,CAAC,IAAI,EAAEiC,KAAK,CAAC;IAC/B;EAAC;IAAAN,GAAA;IAAAC,KAAA,EASD,SAAAM,cAAcC,GAAG,EAAEC,UAAU,EAAE;MAC7B,IAAI,OAAOD,GAAG,KAAK,QAAQ,IAAI,OAAOC,UAAU,KAAK,QAAQ,EAAE;QAC7D,MAAM,IAAIL,KAAK,CAAC,2EAA2E,CAAC;MAC9F;MAEA,IAAI,CAACzB,YAAY,CAAC8B,UAAU,CAAC,EAAE;QAC7B,MAAM,IAAIL,KAAK,CAAE,+DAA8DM,MAAM,CAACC,IAAI,CAAChC,YAAY,CAAC,CAACiC,IAAI,CAAC,IAAI,CAAE,EAAC,CAAC;MACxH;MAEA,OAAO,IAAItC,UAAU,CAAC,IAAI,EAAEkC,GAAG,EAAEC,UAAU,CAAC;IAC9C;EAAC;AAAA,EAtDgDlC,UAAU;AAAA,SAAxCc,qBAAqB,IAAAwB,OAAA;AAyD1C,OAAO,IAAMC,OAAO,GAAG,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}